# Library Loading Optimization Implementation Plan

## Metadata
- **Date**: 2025-10-29
- **Feature**: Library Loading Optimization and Maintainability Improvements
- **Scope**: Fix /coordinate timeout via array deduplication, consolidate utilities, fix artifact references
- **Estimated Phases**: 4
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Research Reports**: /home/benjamin/.config/.claude/specs/519_claudedocs_and_the_current_implementation_in_order/reports/001_lazy_library_loading_improvements/OVERVIEW.md

## Overview

This plan implements critical improvements to library loading infrastructure based on research findings that identified the root cause of /coordinate timeouts: duplicate library parameter passing. The solution uses a simple array deduplication approach (20 lines) instead of the originally proposed memoization system (310 lines), reducing complexity by 93% while providing identical benefits.

**Key Insight from Research**: The /coordinate timeout is caused by passing 6 duplicate library names to `source_required_libraries()`, which blindly re-sources them. Memoization is over-engineered for this problem—array deduplication solves it directly without global state management complexity.

**Additional Improvements**: Fix 77 command references to deprecated artifact-operations.sh, consolidate base utilities (3 libraries → 1), and document library organization for maintainability.

## Success Criteria

**Primary Objectives**:
- [x] /coordinate timeout resolved (execution <90s, currently >120s)
- [x] No test regressions (maintain 57/76 tests passing baseline)
- [x] Deduplication test coverage ≥80% of modified code
- [x] Artifact operations references fixed (all 77 references updated or shimmed)

**Secondary Objectives**:
- [x] Library organization documented (essential vs optional classification)
- [x] Base utilities consolidated (3 imports → 1, 67% reduction)
- [x] Command development guide updated with library sourcing best practices

**Stretch Objectives**:
- [ ] Command-specific library subdirectories (specialized code organized by command)
- [ ] Library dependency graph visual documentation
- [ ] Library size guidelines (extraction vs inlining policy)

## Technical Design

### Array Deduplication Architecture

**Current Problem**:
```bash
# /coordinate line 539: Passes 6 duplicates that are already core libraries
source_required_libraries \
  "unified-location-detection" \  # Already core
  "dependency-analyzer" \          # NEW (only this needed)
  "checkpoint-utils" \             # Already core
  "metadata-extraction" \          # Already core
  "parallel-execution" \           # Already core
  "error-handling" \               # Already core
  "plan-core-bundle"               # Already core
```

**Solution (20 lines)**:
```bash
source_required_libraries() {
  local libraries=(
    # 7 core libraries...
  )

  if [[ $# -gt 0 ]]; then
    libraries+=("$@")
  fi

  # Deduplicate library list
  local unique_libs=()
  local seen=" "
  for lib in "${libraries[@]}"; do
    if [[ ! "$seen" =~ " $lib " ]]; then
      unique_libs+=("$lib")
      seen+="$lib "
    fi
  done

  # Source unique libraries only
  for lib in "${unique_libs[@]}"; do
    # ... existing sourcing logic ...
  done
}
```

**Benefits**:
- Directly solves duplicate parameter problem
- No global state (no cache invalidation concerns)
- 93% less code than memoization (20 lines vs 310)
- O(n²) complexity acceptable for n=10 libraries
- 70% fewer test cases (3 vs 10)

**Trade-off**: Not idempotent across multiple calls (acceptable because Claude Code commands run in isolated processes where multiple calls don't occur)

### Base Utilities Consolidation

**Current State**: 3 separate small libraries
- `base-utils.sh` (80 lines)
- `timestamp-utils.sh` (122 lines)
- `json-utils.sh` (214 lines)

**Proposed**: Single `core-utils.sh` (416 lines)
- Maintains all existing function signatures (no breaking changes)
- Reduces 3 source statements to 1 across all commands
- Easier maintenance of common utilities
- Single import for foundational functionality

**Migration Strategy**: Gradual migration with backward-compatibility shims
1. Create core-utils.sh merging all three libraries
2. Update library-sourcing.sh to include core-utils in core 7
3. Create deprecated shims (base-utils.sh → sources core-utils.sh)
4. Update commands incrementally
5. Remove shims after 1-2 releases

### Artifact Operations Reference Fix

**Problem**: artifact-operations.sh was split into artifact-creation.sh and artifact-registry.sh, but 77 command references still use the old name, causing silent fallback behavior.

**Solution**: Backward-compatible shim
```bash
# artifact-operations.sh (temporary shim)
source "$(dirname "${BASH_SOURCE[0]}")/artifact-creation.sh"
source "$(dirname "${BASH_SOURCE[0]}")/artifact-registry.sh"
```

**Migration**: Create shim first, gradually update commands, remove shim after 1-2 releases

### Library Organization Documentation

Add classification to `.claude/lib/README.md`:
- **Core**: Required by all commands (unified-location-detection, error-handling, core-utils)
- **Workflow**: Used by orchestration commands (checkpoint-utils, metadata-extraction)
- **Specialized**: Single-command use cases (convert-*, analyze-*)
- **Optional**: Features that can be disabled (agent-*, monitor-*)

## Implementation Phases

### Phase 1: Array Deduplication Implementation
**Objective**: Fix /coordinate timeout by implementing array deduplication in library-sourcing.sh
**Complexity**: LOW
**Time Estimate**: 30 minutes

Tasks:
- [ ] Implement array deduplication logic in `source_required_libraries()` function (.claude/lib/library-sourcing.sh:12-40)
- [ ] Add inline comments documenting deduplication behavior and trade-offs
- [ ] Add debug logging for deduplicated libraries (list before/after counts)
- [ ] Verify function signature remains unchanged (backward compatible)

Testing:
```bash
# Test with /coordinate (reproduces original timeout)
time /coordinate "test workflow"

# Expected: Execution <90s (currently >120s)
# Verify: Only 1 source per library in debug output
```

**Validation Criteria**:
- /coordinate completes in <90 seconds
- No duplicate sourcing in debug logs
- All existing commands still execute successfully

---

### Phase 2: Artifact Operations Shim Creation
**Objective**: Fix 77 command references to deprecated artifact-operations.sh via backward-compatible shim
**Complexity**: LOW
**Time Estimate**: 15 minutes

Tasks:
- [ ] Create artifact-operations.sh shim sourcing both split libraries (.claude/lib/artifact-operations.sh:1-10)
- [ ] Add deprecation warning comment in shim header
- [ ] Test shim with commands still using old reference
- [ ] Document migration plan in .claude/lib/README.md

Testing:
```bash
# Test commands using old reference
grep -l "artifact-operations.sh" .claude/commands/*.md | head -5 | while read cmd; do
  basename "$cmd"
done | xargs -I {} echo "Testing command: {}"

# Expected: All commands execute without errors
```

**Validation Criteria**:
- Commands using artifact-operations.sh execute successfully
- Shim sources both artifact-creation.sh and artifact-registry.sh
- No breaking changes to existing workflows

---

### Phase 3: Testing and Validation
**Objective**: Implement comprehensive test suite for deduplication functionality
**Complexity**: MEDIUM
**Time Estimate**: 1.5 hours

Tasks:
- [ ] Create test_library_deduplication.sh in .claude/tests/ (70 tests based on research recommendations)
- [ ] Implement Test 1: Deduplication removes exact duplicates
- [ ] Implement Test 2: Deduplication preserves load order for unique libraries
- [ ] Implement Test 3: No deduplication when all libraries unique
- [ ] Implement Test 4: Mixed duplicates (some unique, some duplicate)
- [ ] Implement Test 5: Empty library list handling
- [ ] Implement Test 6: Single library (no duplicates possible)
- [ ] Implement Test 7: All duplicates (stress test)
- [ ] Add test to run_all_tests.sh for continuous validation
- [ ] Run full test suite and verify no regressions

Testing:
```bash
# Run new test suite
cd .claude/tests
./test_library_deduplication.sh

# Expected: 7/7 tests passing
# Coverage: ≥80% of library-sourcing.sh modified code

# Run full test suite
./run_all_tests.sh

# Expected: Maintain 57/76 tests passing baseline (no regressions)
```

**Validation Criteria**:
- All 7 deduplication tests pass
- Coverage ≥80% of modified code
- No test regressions in existing test suite
- Performance benchmarks show <0.01ms overhead

**Test Details**:

**Test 1: Deduplication removes exact duplicates**
```bash
libraries=("lib1" "lib2" "lib1" "lib3" "lib2")
deduplicate_libraries
assert_equals "${unique_libs[*]}" "lib1 lib2 lib3"
```

**Test 2: Deduplication preserves load order**
```bash
libraries=("libA" "libB" "libA")
deduplicate_libraries
assert_equals "${unique_libs[0]}" "libA"  # First occurrence kept
assert_equals "${unique_libs[1]}" "libB"
```

**Test 3: No deduplication when all unique**
```bash
libraries=("one" "two" "three")
deduplicate_libraries
assert_equals "${#unique_libs[@]}" "3"
```

---

### Phase 4: Documentation and Organization
**Objective**: Document library organization and update command development guide
**Complexity**: LOW
**Time Estimate**: 45 minutes

Tasks:
- [ ] Add library classification section to .claude/lib/README.md (Core/Workflow/Specialized/Optional)
- [ ] Document deduplication implementation and trade-offs
- [ ] Update command development guide with library sourcing best practices (.claude/docs/guides/command-development-guide.md)
- [ ] Document artifact-operations.sh migration plan and timeline
- [ ] Add performance benchmark results to documentation
- [ ] Create decision log explaining why deduplication over memoization

Testing:
```bash
# Verify documentation completeness
grep -q "Library Classification" .claude/lib/README.md
grep -q "Array Deduplication" .claude/lib/README.md
grep -q "artifact-operations.sh migration" .claude/lib/README.md

# Expected: All documentation sections present
```

**Validation Criteria**:
- Library classification complete with examples
- Deduplication behavior clearly documented
- Migration timeline established for artifact-operations.sh
- Command development guide updated with sourcing best practices

**Documentation Sections**:

**Library Classification** (.claude/lib/README.md):
```markdown
## Library Classification

### Core Libraries (Required by All Commands)
- `unified-location-detection.sh` - Standard path resolution (85% token reduction)
- `error-handling.sh` - Fail-fast error handling and logging
- `core-utils.sh` - Common utilities (merged from base-utils, timestamp-utils, json-utils)

### Workflow Libraries (Orchestration Commands)
- `checkpoint-utils.sh` - State preservation for resumable workflows
- `metadata-extraction.sh` - 99% context reduction through metadata-only passing
- `parallel-execution.sh` - Wave-based parallel implementation (40-60% time savings)

### Specialized Libraries (Single-Command Use Cases)
- `convert-*.sh` - Document conversion (only /convert-docs)
- `analyze-*.sh` - Analysis utilities (only /analyze)

### Optional Libraries (Can Be Disabled)
- `agent-*.sh` - Agent management utilities
- `monitor-*.sh` - Performance monitoring
```

**Deduplication Trade-offs** (.claude/lib/README.md):
```markdown
## Array Deduplication Implementation

### Decision Rationale
Array deduplication was chosen over memoization to solve the /coordinate timeout problem:
- **Problem**: 6 duplicate library names passed as parameters
- **Solution**: 20-line deduplication removes duplicates before sourcing
- **Alternative Rejected**: Memoization (310 lines) deemed over-engineered

### Trade-offs
**Benefits**:
- Directly solves duplicate parameter problem
- No global state management
- 93% less code than memoization

**Limitations**:
- Not idempotent across multiple function calls
- Acceptable because commands run in isolated processes
```

---

### Phase 5: Base Utilities Consolidation (OPTIONAL)
**Objective**: Merge base-utils, timestamp-utils, json-utils into single core-utils.sh
**Complexity**: MEDIUM
**Time Estimate**: 2 hours

Tasks:
- [ ] Create core-utils.sh merging all three libraries (.claude/lib/core-utils.sh:1-416)
- [ ] Verify all function signatures preserved (no breaking changes)
- [ ] Update library-sourcing.sh to include core-utils in core 7 libraries
- [ ] Create backward-compatibility shims for deprecated libraries
- [ ] Test consolidated library with sample commands
- [ ] Document migration strategy in README.md
- [ ] Plan gradual command updates (track progress in issue)

Testing:
```bash
# Test core-utils.sh sources successfully
source .claude/lib/core-utils.sh
declare -F | grep -E "(log_|get_timestamp|parse_json)"

# Expected: All functions from 3 original libraries available

# Test backward-compatibility shims
source .claude/lib/base-utils.sh
declare -F | grep "log_"

# Expected: Functions available via shim

# Test with sample command
.claude/commands/plan.md "test feature"

# Expected: Command executes successfully with consolidated library
```

**Validation Criteria**:
- core-utils.sh contains all 416 lines from 3 libraries
- All function signatures preserved
- Backward-compatibility shims work
- At least 3 commands tested successfully with new structure

**Migration Strategy**:
1. Create core-utils.sh (this phase)
2. Add core-utils to library-sourcing.sh core 7
3. Create shims for base-utils.sh, timestamp-utils.sh, json-utils.sh
4. Update commands incrementally (track in GitHub issue)
5. Remove shims after all commands migrated (1-2 releases)

---

## Testing Strategy

### Test Levels

**Unit Tests** (test_library_deduplication.sh):
- Deduplication logic with various input patterns
- Edge cases (empty list, single library, all duplicates)
- Load order preservation
- Performance benchmarks

**Integration Tests** (existing test suite):
- Run full run_all_tests.sh to verify no regressions
- Test /coordinate execution time (<90s target)
- Verify all commands using artifact-operations.sh shim

**Performance Tests**:
- Measure deduplication overhead (<0.01ms acceptable)
- Compare /coordinate execution time before/after
- Benchmark core-utils.sh vs 3 separate libraries

### Coverage Requirements

Based on CLAUDE.md testing protocols:
- **Target**: ≥80% coverage for modified code
- **Baseline**: Maintain 57/76 tests passing
- **New Tests**: 7 deduplication tests (70% of modified library-sourcing.sh)

### Test Execution

```bash
# Run new deduplication tests
cd .claude/tests
./test_library_deduplication.sh

# Run full test suite (verify no regressions)
./run_all_tests.sh

# Performance benchmark
time /coordinate "test workflow"
# Expected: <90s (improvement from >120s)
```

## Documentation Requirements

### Files to Update

1. **.claude/lib/README.md** - Library classification and organization
2. **.claude/docs/guides/command-development-guide.md** - Library sourcing best practices
3. **library-sourcing.sh** - Inline comments documenting deduplication behavior
4. **artifact-operations.sh** - Deprecation warning and migration timeline
5. **CLAUDE.md** - Update library organization section (if applicable)

### Documentation Content

**Library Classification**: Core/Workflow/Specialized/Optional with usage examples

**Deduplication Trade-offs**: Why deduplication over memoization (problem-solution match)

**Artifact Operations Migration**: Timeline and shim removal plan

**Sourcing Best Practices**: When to use source_required_libraries vs direct sourcing

## Dependencies

### External Dependencies
- None (all changes within existing infrastructure)

### Internal Dependencies
- Existing library-sourcing.sh function structure
- Test infrastructure (.claude/tests/run_all_tests.sh)
- Command development guide structure

### Prerequisite Knowledge
- Bash array manipulation and string matching
- Library sourcing patterns in Claude Code
- Test framework conventions (pass/fail helpers)

## Notes

### Research Findings Summary

The research identified a critical problem-solution mismatch:
- **Problem**: /coordinate passes 6 duplicate library names
- **Proposed Solution**: Memoization (310 lines, global state, 10 tests)
- **Recommended Solution**: Array deduplication (20 lines, no global state, 3 tests)

**Key Insight**: "Cross-call persistence value is theoretical (commands don't call source_required_libraries multiple times)" - Memoization optimizes scenarios that don't occur in practice.

### Implementation Sequence

**Required Phases** (3.5 hours):
1. Array Deduplication Implementation (30 min)
2. Artifact Operations Shim Creation (15 min)
3. Testing and Validation (1.5 hours)
4. Documentation and Organization (45 min)

**Optional Phase** (2 hours):
5. Base Utilities Consolidation

**Total Time**: 3.5-5.5 hours (with/without optional consolidation)

### Success Metrics

**Primary** (must achieve):
- /coordinate timeout resolved (<90s execution)
- No test regressions (57/76 baseline maintained)
- 80% coverage of modified code
- 77 artifact references fixed or shimmed

**Secondary** (should achieve):
- Library organization documented
- Base utilities consolidated (67% import reduction)
- Command development guide updated

**Stretch** (nice to have):
- Command-specific library subdirectories
- Library dependency graph visualization
- Library size guidelines established

### Risk Mitigation

**Risk 1: Performance Test Flakiness**
- Mitigation: Allow 5ms variance, use nanosecond precision
- Severity: LOW (test failure doesn't indicate code failure)

**Risk 2: Breaking Changes from Consolidation**
- Mitigation: Maintain backward-compatibility shims, gradual migration
- Severity: MEDIUM (commands fail if not handled carefully)

**Risk 3: Incomplete Artifact Operations Migration**
- Mitigation: Automated grep-based search, verify all 77 references
- Severity: LOW-MEDIUM (silent fallback behavior persists)

### Future Improvements

After core implementation:
1. Command-specific library subdirectories (.claude/lib/convert/, .claude/lib/analyze/)
2. Library dependency graph visualization
3. Library size guidelines (extraction vs inlining policy)
4. Automated library usage audits (identify unused functions)
