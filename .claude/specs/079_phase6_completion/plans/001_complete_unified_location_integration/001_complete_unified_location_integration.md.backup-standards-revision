# Complete Unified Location Detection Integration

## Metadata
- **Plan ID**: 001_complete_unified_location_integration
- **Topic**: 079_phase6_completion
- **Created**: 2025-10-23
- **Status**: Active
- **Organization Level**: Level 1 (phases with complexity ≥6 expanded to separate files)
- **Expanded Phases**: [5]
- **Complexity**: 7.5/10
- **Estimated Duration**: 6.5-7.5 hours
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Parent Context**: Completes Phase 6 Task Groups 3-8 from plan 002_optimize_supervise_location_detection.md
- **Foundation**: Builds on completed unified-location-detection.sh library (Task Groups 1-2)

## Overview

This plan completes the system-wide location detection standardization by integrating the unified-location-detection.sh library (created in Phase 6 Task Groups 1-2) into four critical workflow commands: /report, /research, /plan, and /orchestrate. The integration eliminates code duplication, achieves 15-20% system-wide token reduction, and establishes a single source of truth for location logic across all workflow initiation commands.

**Note**: /research integration added to Phase 1 based on analysis showing it shares nearly identical location detection patterns with /report (both create research artifacts using hierarchical multi-agent patterns).

**Current State**:
- ✓ Unified library created and tested (.claude/lib/unified-location-detection.sh, 386 lines)
- ✓ Core functions 100% verified (sanitization, topic numbering, directory creation)
- ✓ JSON output format with legacy YAML compatibility
- ✓ MANDATORY VERIFICATION checkpoints implemented
- ⏸ Command integration deferred (Task Groups 3-8, this plan)

**Goal State**:
- All 5 commands (/supervise, /orchestrate, /report, /research, /plan) use unified library
- 15-20% system-wide token reduction achieved
- 75% code duplication eliminated
- Single source of truth for location detection logic
- Comprehensive integration testing validates cross-command compatibility
- /research hierarchical structure fully supported by library extension

## Success Criteria

- [ ] /report command refactored to use unified library (Validation Gate 1: 5/5 tests pass)
- [ ] /research command refactored to use unified library (Validation Gate 1: 5/5 tests pass)
- [ ] Unified library extended with `create_research_subdirectory()` function
- [ ] /plan command refactored to use unified library (Validation Gate 2: 5/5 tests pass)
- [ ] /orchestrate command refactored to use unified library (Validation Gate 3: 5/5 workflow tests pass)
- [ ] Model metadata standardized across all agents per Report 074
- [ ] System-wide integration tests pass (≥95% pass rate, 47+/50 tests)
- [ ] Token reduction target achieved (15-20% system-wide)
- [ ] Documentation complete (API reference, rollback procedures, command docs updated)
- [ ] Rollback procedures documented and tested
- [ ] Zero regressions in existing workflows
- [ ] Backward compatibility maintained for 2 release cycles

## Risk Assessment

**Medium-High Risk** (7.5/10):
- **Multi-Command Regression**: Changes affect 5 critical workflow commands (30-40% probability)
- **Cross-Command Cascading**: /orchestrate invokes /report and /plan (20-30% probability)
- **Backward Compatibility**: Existing workflows may depend on command-specific logic (10-20% probability)

**Mitigation**:
- Per-command validation gates (rollback if ANY command >5% failure rate)
- Feature flag for gradual rollout (`USE_UNIFIED_LOCATION="${USE_UNIFIED_LOCATION:-true}"`)
- Comprehensive rollback procedures with backups
- Progressive integration (/report → /plan → /orchestrate, lowest to highest risk)

## Technical Design

### Architecture

**Before Integration** (current state):
```
/report   → ad-hoc utilities (50 lines location logic)
/plan     → similar ad-hoc utilities (50 lines location logic)
/orchestrate → location-specialist agent (75.6k tokens, 25.2s)
/supervise   → location-specialist agent (ALREADY OPTIMIZED in Phase 6)
```

**After Integration** (target state):
```
All commands → unified-location-detection.sh (7 reusable functions)
              → perform_location_detection("workflow desc") → JSON
              → extract paths via jq or sed fallback
              → <11k tokens, <1s execution
```

**Token Impact**:
- /report: Minimal (already optimized, no AI involved)
- /plan: Minimal (already optimized, no AI involved)
- /orchestrate: **65k token reduction** (75.6k → 11k)
- System-wide: **15-20% overall reduction**

### Integration Pattern

Each command will follow this standardized pattern:

```bash
# Source unified library
source "${CLAUDE_CONFIG}/.claude/lib/unified-location-detection.sh"

# Perform location detection
LOCATION_JSON=$(perform_location_detection "$USER_INPUT" "true")

# Extract artifact paths
if command -v jq &>/dev/null; then
  TOPIC_PATH=$(echo "$LOCATION_JSON" | jq -r '.topic_path')
  REPORTS_DIR=$(echo "$LOCATION_JSON" | jq -r '.artifact_paths.reports')
else
  # Fallback without jq
  TOPIC_PATH=$(echo "$LOCATION_JSON" | grep -o '"topic_path": *"[^"]*"' | sed 's/.*: *"\([^"]*\)".*/\1/')
fi

# MANDATORY VERIFICATION checkpoint
if [ ! -d "$TOPIC_PATH" ]; then
  echo "ERROR: Location detection failed - directory not created"
  exit 1
fi
```

## Implementation Phases

### Phase 0: Prerequisites Validation [COMPLETED]

**Dependencies**: []
**Complexity**: 1/10
**Estimated Time**: 5 minutes
**Risk**: Low

#### Objective

Verify that all prerequisites from Phase 6 are met before proceeding with command integration.

#### Tasks

- [x] Verify unified-location-detection.sh library exists and is executable
- [x] Verify test suite exists (.claude/tests/test_unified_location_detection.sh)
- [x] Verify core functions tested (sanitization, topic numbering, structure creation)
- [x] Confirm Phase 6 Task Groups 1-2 marked COMPLETED in phase_6_system_wide_standardization.md
- [x] Review phase_6_progress.md for known issues and workarounds

#### Success Criteria

- [x] Library file exists at .claude/lib/unified-location-detection.sh (386+ lines)
- [x] Library is executable (chmod +x applied)
- [x] Test files exist and core functions verified
- [x] Documentation confirms Task Groups 1-2 completion

---

### Phase 1: /report and /research Command Integration

**Dependencies**: [0]
**Complexity**: 5/10
**Estimated Time**: 60-75 minutes (30 min /report + 30-45 min /research)
**Risk**: Low (isolated usage, no downstream dependencies)

#### Objective

Refactor both /report and /research commands to replace ad-hoc location detection logic with unified library, achieving code standardization across sibling research commands without regression.

**Rationale for Joint Integration**: /research is described as "improved /report" in CLAUDE.md. Both commands create research artifacts using hierarchical multi-agent patterns and share nearly identical location detection needs. Refactoring together ensures consistency and leverages shared testing infrastructure.

**Validation Gate 1**: MUST pass 10/10 isolation tests (5 /report + 5 /research) before proceeding to Phase 2

#### Tasks - Report Command Refactoring

- [ ] **Backup**: Create backup at .claude/commands/report.md.backup-unified-integration
- [ ] **Analysis**: Read current /report command and identify location detection section
- [ ] **Refactoring**: Replace ad-hoc utilities with unified library integration:
  - [ ] Source unified-location-detection.sh at command start
  - [ ] Replace location logic with `perform_location_detection()` call
  - [ ] Extract `REPORTS_DIR` from JSON output (jq + sed fallback)
  - [ ] Update downstream report file creation to use extracted paths
  - [ ] Add MANDATORY VERIFICATION checkpoint after location detection
- [ ] **Validation**: Test refactored command with 5 diverse research topics
- [ ] **Verification**: Confirm reports created in correct directories with proper numbering

#### Testing Protocol

**Test Suite**: 5 diverse research topics

```bash
# Test 1: Simple research topic
/report "authentication patterns"
# Verify: specs/[NNN]_authentication_patterns/reports/001_authentication_patterns.md exists

# Test 2: Multi-word topic with special characters
/report "Research: OAuth 2.0 Security Best Practices"
# Verify: Sanitized to oauth_20_security_best_practices

# Test 3: Very long description (truncation test)
/report "Comprehensive analysis of microservices architecture patterns for distributed systems with event-driven communication"
# Verify: Topic name truncated to 50 chars, report created

# Test 4: Minimal description (edge case)
/report "test"
# Verify: Valid topic directory created

# Test 5: Existing topic number collision
# Create specs/042_test manually, then:
/report "test topic"
# Verify: New topic gets 043, not 042
```

---

#### Tasks - Unified Library Extension for /research

**Prerequisite**: /report integration must be complete and validated before extending library

- [ ] **Library Extension**: Add `create_research_subdirectory()` function to unified-location-detection.sh
  - [ ] Function creates numbered subdirectory within topic's reports/ for hierarchical research
  - [ ] Arguments: topic_path (absolute), research_name (sanitized snake_case)
  - [ ] Returns: Absolute path to research subdirectory
  - [ ] Creates: `{topic_path}/reports/{NNN_research_name}/`
  - [ ] Handles empty directory case (first research → 001)
  - [ ] Increments existing numbers correctly (001 → 002 → 003)
- [ ] **Unit Tests**: Add tests for `create_research_subdirectory()` to test_unified_location_detection.sh
  - [ ] Test research subdirectory numbering
  - [ ] Test nested directory creation
  - [ ] Test edge cases (empty reports/, collision handling)

---

#### Tasks - Research Command Refactoring

- [ ] **Backup**: Create backup at .claude/commands/research.md.backup-unified-integration
- [ ] **Analysis**: Read current /research command and identify location detection section (lines 77-154)
- [ ] **Refactoring**: Replace ad-hoc utilities with unified library integration:
  - [ ] Source unified-location-detection.sh at command start
  - [ ] Replace topic extraction with `perform_location_detection()` call
  - [ ] Extract `TOPIC_PATH` and `TOPIC_NAME` from JSON output (jq + sed fallback)
  - [ ] Call `create_research_subdirectory()` for hierarchical report structure
  - [ ] Update subtopic report path calculation to use research subdirectory
  - [ ] Add MANDATORY VERIFICATION checkpoint after location detection
  - [ ] Add MANDATORY VERIFICATION for research subdirectory creation
  - [ ] Maintain MANDATORY VERIFICATION for absolute paths (lines 132-145 pattern)
- [ ] **Validation**: Test refactored command with 5 diverse research topics
- [ ] **Verification**: Confirm hierarchical reports created in correct directories with proper numbering

#### Testing Protocol - /research

**Test Suite**: 5 diverse research topics

```bash
# Test 1: Simple research topic
/research "authentication patterns"
# Verify: specs/{NNN}_auth_patterns/reports/001_auth_patterns/ created
# Verify: Subtopic reports created with correct numbering (001, 002, 003, etc.)
# Verify: All paths are absolute

# Test 2: Multi-word topic with special characters
/research "Research: OAuth 2.0 Security Best Practices"
# Verify: Sanitized to oauth_20_security_best_practices
# Verify: Hierarchical structure created correctly
# Verify: Research subdirectory numbered 001

# Test 3: Existing topic reuse
# Create specs/042_test manually, then:
/research "test topic"
# Verify: Reuses existing topic directory
# Verify: Creates 001_test_topic/ subdirectory in reports/
# Verify: No topic number collision

# Test 4: Multiple research invocations on same topic
/research "test topic"
/research "test topic"
# Verify: First creates 001_test_topic/, second creates 002_test_topic/
# Verify: Both subdirectories contain correctly numbered subtopic reports
# Verify: No file path collisions

# Test 5: Agent delegation with absolute paths
/research "complex topic requiring parallel agent delegation"
# Verify: Agents receive absolute paths to subtopic reports
# Verify: All reports created at correct locations in research subdirectory
# Verify: Hierarchical structure maintained
```

#### Validation Gate 1 Criteria

**Combined /report and /research Validation**:

- [ ] 10/10 tests pass (100% success rate: 5 /report + 5 /research)
- [ ] /report: Reports created in correct topic directories (flat structure)
- [ ] /research: Hierarchical reports created in research subdirectories
- [ ] Topic numbering sequential and collision-free for both commands
- [ ] Research subdirectory numbering correct (001, 002, 003, etc.)
- [ ] Absolute paths verified for agent delegation (/research requirement)
- [ ] No regression in report quality or format for either command
- [ ] Token usage unchanged (already optimized, no AI involved)
- [ ] MANDATORY VERIFICATION checkpoints trigger on failure
- [ ] Library extension (create_research_subdirectory) passes unit tests

#### Rollback Procedure

If Gate 1 fails:
```bash
# Restore /report command
cp .claude/commands/report.md.backup-unified-integration .claude/commands/report.md

# Restore /research command (if refactored)
cp .claude/commands/research.md.backup-unified-integration .claude/commands/research.md

# Rollback library extension (if added)
git checkout .claude/lib/unified-location-detection.sh

# Investigate failures before retrying
```

---

### Phase 2: /plan Command Integration

**Dependencies**: [1] (requires Phase 1 validation)
**Complexity**: 4/10
**Estimated Time**: 30 minutes
**Risk**: Medium (invoked by /orchestrate, affects downstream /implement)

#### Objective

Refactor /plan command to use unified library while maintaining /implement compatibility (absolute paths required).

**Validation Gate 2**: MUST pass 5/5 isolation tests before proceeding to Phase 3

#### Tasks - Plan Command Refactoring

- [ ] **Backup**: Create backup at .claude/commands/plan.md.backup-unified-integration
- [ ] **Analysis**: Read current /plan command and identify location detection section
- [ ] **Refactoring**: Replace ad-hoc utilities with unified library integration:
  - [ ] Source unified-location-detection.sh at command start
  - [ ] Replace location logic with `perform_location_detection()` call
  - [ ] Extract `PLANS_DIR` from JSON output (jq + sed fallback)
  - [ ] Update plan file creation to use extracted paths
  - [ ] Ensure absolute paths for /implement compatibility
  - [ ] Add MANDATORY VERIFICATION checkpoint after location detection
- [ ] **Validation**: Test refactored command with 5 diverse feature descriptions
- [ ] **Verification**: Confirm plans created in correct directories
- [ ] **/implement Compatibility**: Test that /implement can locate plan files correctly

#### Testing Protocol

**Test Suite**: 5 diverse feature descriptions

```bash
# Test 1: Simple feature
/plan "user authentication"
# Verify: specs/[NNN]_user_authentication/plans/001_user_authentication.md exists
# Verify: /implement can locate the plan file

# Test 2: Complex multi-word feature
/plan "implement real-time WebSocket notifications with Redis pub/sub"
# Verify: Sanitized correctly, plan created with absolute paths

# Test 3: Refactoring task
/plan "refactor database connection pooling"
# Verify: Plan created in correct directory

# Test 4: Bug fix description
/plan "fix memory leak in event handler cleanup"
# Verify: Valid plan file created

# Test 5: Integration with research reports
/plan "implement authentication" specs/042_auth/reports/001_auth_patterns.md
# Verify: Plan references research report correctly
```

#### Validation Gate 2 Criteria

- [ ] 5/5 tests pass (100% success rate)
- [ ] Plans created in correct topic directories with absolute paths
- [ ] /implement can locate all generated plan files
- [ ] Topic numbering sequential and collision-free
- [ ] No regression in plan structure or format
- [ ] Token usage unchanged (already optimized, no AI involved)
- [ ] MANDATORY VERIFICATION checkpoint triggers on failure

#### Rollback Procedure

If Gate 2 fails:
```bash
cp .claude/commands/plan.md.backup-unified-integration .claude/commands/plan.md
# Investigate failures before retrying
```

---

### Phase 3: /orchestrate Command Integration

**Dependencies**: [2] (requires Phase 2 validation)
**Complexity**: 8/10 (highest risk command)
**Estimated Time**: 2 hours
**Risk**: High (invokes /report and /plan, multi-phase workflows)

#### Objective

Refactor /orchestrate command to replace location-specialist agent invocation with unified library, achieving 65k token reduction (75.6k → 11k) while maintaining full workflow compatibility.

**Validation Gate 3**: MUST pass 5/5 workflow tests before system-wide integration testing

#### Context

/orchestrate is the most complex integration:
- Currently invokes location-specialist agent via Task tool (75.6k tokens, 25.2s)
- Invokes /report and /plan commands (must use updated versions from Phases 1-2)
- Multi-phase workflow (research → plan → implement → debug)
- Requires feature flag for gradual rollout
- Highest optimization impact (65k token reduction)

#### Tasks - /orchestrate Command Refactoring

- [ ] **Backup**: Create backup at .claude/commands/orchestrate.md.backup-unified-integration
- [ ] **Analysis**: Read current /orchestrate command and identify Phase 0 location-specialist agent invocation
- [ ] **Refactoring**: Replace agent invocation with unified library integration:
  - [ ] Source unified-location-detection.sh at command start
  - [ ] Replace location-specialist agent Task call with `perform_location_detection()` call
  - [ ] Extract artifact paths from JSON output (jq + sed fallback)
  - [ ] Update downstream workflow phases to use extracted paths
  - [ ] Add MANDATORY VERIFICATION checkpoint after location detection
  - [ ] Implement feature flag: `USE_UNIFIED_LOCATION="${USE_UNIFIED_LOCATION:-true}"`
- [ ] **Validation**: Test refactored command with 5 diverse workflow descriptions
- [ ] **Verification**: Confirm all workflow phases execute correctly with proper paths
- [ ] **Token Reduction**: Verify 65k token reduction (75.6k → <11k)
- [ ] **Performance**: Verify <1s execution time (vs 25.2s baseline)

#### Testing Protocol

**Test Suite**: 5 diverse workflow descriptions

```bash
# Test 1: Research workflow
/orchestrate "research authentication patterns"
# Verify: Phase 0 completes in <1s, reports directory created, research phase invokes /report

# Test 2: Implementation workflow
/orchestrate "implement user dashboard"
# Verify: Phase 0 completes, plans directory created, planning phase invokes /plan

# Test 3: Debug workflow
/orchestrate "debug memory leak in event handlers"
# Verify: Debug artifacts directory created, workflow phases execute

# Test 4: Refactoring workflow
/orchestrate "refactor database connection pooling"
# Verify: All artifact directories created, paths propagate correctly

# Test 5: Complex multi-phase workflow
/orchestrate "research, plan, and implement OAuth 2.0 authentication"
# Verify: Complete workflow execution, all phases use correct paths
```

#### Validation Gate 3 Criteria

- [ ] 5/5 tests pass (100% success rate)
- [ ] Token reduction ≥65k (target: 75.6k → <11k)
- [ ] Execution time <1s (vs 25.2s baseline)
- [ ] All workflow phases receive correct artifact paths
- [ ] No regression in workflow functionality
- [ ] Feature flag works correctly (USE_UNIFIED_LOCATION=false fallback)
- [ ] MANDATORY VERIFICATION checkpoint triggers on failure

#### Rollback Procedure

If Gate 3 fails:
```bash
cp .claude/commands/orchestrate.md.backup-unified-integration .claude/commands/orchestrate.md
# Investigate failures before retrying
```

---

### Phase 4: Model Metadata Standardization

**Dependencies**: [3]
**Complexity**: 5/10
**Estimated Time**: 1 hour
**Risk**: Low (metadata changes only, no logic changes)

#### Objective

Apply Report 074 recommendations to standardize agent model assignments across all 19 agents, achieving 15-20% system-wide cost reduction.

#### Tasks - Model Metadata Audit

- [ ] **Audit**: List all agents without model metadata:
  ```bash
  grep -L "model:" .claude/agents/*.md
  ```
- [ ] **Review Report 074**: Extract model assignment recommendations
- [ ] **Categorize Agents**: Assign Haiku/Sonnet/Opus based on agent complexity:
  - **Haiku 4.5**: Read-only analysis, simple pattern matching, diagnostic agents
  - **Sonnet 4.5**: Complex orchestration, planning, code generation
  - **Opus 4**: Rare use (architectural decisions, complex refactoring)
- [ ] **Update Frontmatter**: Add model metadata to all agents

#### Model Assignment Strategy

```yaml
# Example Haiku 4.5 assignment (read-only, simple)
---
model: haiku-4.5
model-justification: Read-only file analysis, pattern matching, 15k-30k token optimization
fallback-model: sonnet-4.5
---

# Example Sonnet 4.5 assignment (complex orchestration)
---
model: sonnet-4.5
model-justification: Complex multi-phase orchestration, state management required
fallback-model: opus-4
---
```

#### Tasks - Agent Model Assignments

Based on Report 074 recommendations:

- [ ] **location-specialist.md**: Already has `model: haiku-4.5` (Phase 0 of parent plan)
- [ ] **research-coordinator.md**: Add `model: sonnet-4.5` (complex orchestration)
- [ ] **implementation-researcher.md**: Add `model: haiku-4.5` (read-only codebase analysis)
- [ ] **debug-analyst.md**: Add `model: haiku-4.5` (diagnostic analysis)
- [ ] **plan-architect.md**: Add `model: sonnet-4.5` (complex planning)
- [ ] **[Continue for all 19 agents]**: Audit and assign per Report 074 categorization

#### Validation

- [ ] Verify format consistency across all agents:
  ```bash
  grep -A2 "^model:" .claude/agents/*.md
  ```
- [ ] Test Task tool respects agent model metadata:
  ```bash
  # Create test workflow invoking agents with different models
  /orchestrate "test workflow to validate model switching"
  # Verify logs show Haiku/Sonnet usage per agent assignment
  ```
- [ ] Calculate projected cost reduction:
  ```bash
  # Compare baseline (all Sonnet) vs optimized (Haiku/Sonnet mix)
  # Target: 15-20% system-wide reduction
  ```

#### Success Criteria

- [ ] All 19 agents have model metadata in frontmatter
- [ ] Format consistent (model, model-justification, fallback-model)
- [ ] Task tool uses agent-specified models (verified in logs)
- [ ] Projected 15-20% cost reduction achieved

---

### Phase 5: System-Wide Integration Testing [EXPANDED - See: phase_5_system_wide_integration_testing.md]

**Dependencies**: [4]
**Complexity**: 6/10
**Estimated Time**: 2 hours
**Risk**: Medium (cross-command testing reveals hidden issues)

**Note**: This phase is expanded to a separate file due to detailed test specifications (50 test cases across 4 groups).

#### Objective

Validate that all four commands work correctly with unified library through comprehensive integration testing (50 test cases), achieving ≥95% pass rate before production deployment.

**Final Validation Gate**: MUST achieve ≥47/50 tests passing (95%)

#### Summary

Phase 5 implements comprehensive integration testing:
- 50 test cases across 4 test groups (isolated, chaining, concurrent, backward compat)
- Complete test framework with assertion helpers and validation gates
- Performance metrics collection (token usage, cost savings, execution time)
- Automated rollback procedures with per-command restoration
- Pass rate threshold: ≥95% (47/50 tests) required to proceed to Phase 6

See [phase_5_system_wide_integration_testing.md](phase_5_system_wide_integration_testing.md) for complete test specifications and implementation details.

---

### Phase 6: Documentation and Rollback Procedures

**Dependencies**: [5]
**Complexity**: 3/10
**Estimated Time**: 30 minutes
**Risk**: Low (documentation only)

#### Objective

Create comprehensive documentation and rollback procedures to support production deployment and maintenance.

#### Tasks - API Documentation

- [ ] **Create API Reference**: `.claude/docs/reference/unified-location-detection-api.md`
  - [ ] Function signatures and parameters
  - [ ] Return formats (JSON output, YAML legacy)
  - [ ] Usage examples for each command
  - [ ] Error codes and troubleshooting
  - [ ] Performance characteristics (<1s execution, <11k tokens)

#### Tasks - Command Documentation Updates

- [ ] **Update /supervise docs**: Reference unified library (already using it from Phase 6)
- [ ] **Update /orchestrate docs**: Document Phase 0 optimization (agent → library)
- [ ] **Update /report docs**: Document location detection changes
- [ ] **Update /plan docs**: Document location detection changes
- [ ] **Update CLAUDE.md**: Add unified library reference in Project Commands section

#### Tasks - Rollback Procedures

- [ ] **Create Rollback Document**: `.claude/specs/079_phase6_completion/plans/rollback_procedures.md`
  - [ ] Per-command rollback steps (restore from .backup-unified-integration)
  - [ ] Feature flag revert instructions (USE_UNIFIED_LOCATION=false)
  - [ ] Validation checklist for rollback success
  - [ ] Emergency escalation procedures

#### Rollback Document Template

```markdown
# Unified Location Detection Rollback Procedures

## Immediate Rollback (ANY command failure >5%)

### Step 1: Restore Command Files
```bash
# Restore individual command (example: /report)
cp .claude/commands/report.md.backup-unified-integration .claude/commands/report.md

# Or restore all commands
cp .claude/commands/report.md.backup-unified-integration .claude/commands/report.md
cp .claude/commands/plan.md.backup-unified-integration .claude/commands/plan.md
cp .claude/commands/orchestrate.md.backup-unified-integration .claude/commands/orchestrate.md
# Note: /supervise already optimized, no rollback needed
```

### Step 2: Test Rollback Success
```bash
# Run integration test suite
./.claude/tests/test_system_wide_location.sh
# Expected: 100% pass rate with legacy implementations
```

### Step 3: Root Cause Analysis
- Review failed test logs
- Identify specific failure modes
- Determine if bug or design flaw

### Step 4: Fix and Redeploy
- Correct unified library or command integration
- Rerun unit tests (100% pass required)
- Rerun integration tests (95% pass required)
- Retry deployment with fixed code
```

#### Tasks - CLAUDE.md Update

Add to **Project Commands** section:

```markdown
### Location Detection (System-Wide)

All workflow commands use unified location detection library:
- **Library**: .claude/lib/unified-location-detection.sh
- **Commands**: /supervise, /orchestrate, /report, /plan
- **Optimization**: 85-95% token reduction vs agent-based approach
- **Performance**: <1s execution time, <11k tokens
- **Functions**: 7 core functions (project root, specs detection, topic numbering, sanitization, structure creation, orchestration, legacy compatibility)

**API Reference**: See [Unified Location Detection API](.claude/docs/reference/unified-location-detection-api.md)
```

#### Success Criteria

- [ ] API reference document created and comprehensive
- [ ] All command documentation updated with library references
- [ ] Rollback procedures documented with step-by-step instructions
- [ ] CLAUDE.md updated with unified library section
- [ ] Emergency escalation procedures defined

---

## Testing Strategy

### Unit Testing (Completed in Phase 6 Task Group 2)

- ✓ Individual functions in unified-location-detection.sh verified
- ✓ Core functionality: sanitization, topic numbering, directory creation
- ✓ Edge cases: empty directories, special characters, truncation

### Integration Testing (Phase 5)

**Scope**: Cross-command validation with unified library

**Test Files**:
- `.claude/tests/test_system_wide_location.sh` (50 comprehensive tests)

**Coverage**:
- Isolated execution: 25 tests (10 /report, 10 /plan, 5 /orchestrate)
- Command chaining: 10 tests (/orchestrate → subcommands)
- Concurrent execution: 5 tests (race conditions)
- Backward compatibility: 10 tests (existing workflows)

**Pass Criteria**: ≥95% (47+/50 tests)

### Performance Testing (Phase 5)

**Metrics**:
1. Token usage per command (before vs after)
2. Execution time per command (before vs after)
3. Cost per invocation (before vs after)
4. System-wide token reduction percentage

**Targets**:
- /report: No regression (already optimized)
- /plan: No regression (already optimized)
- /orchestrate: 65k token reduction (75.6k → 11k), 20x speedup (25s → <1s)
- System-wide: 15-20% token reduction overall

### Regression Testing (Phase 5)

**Scope**: Ensure refactoring doesn't break existing functionality

**Categories**:
1. Artifact path correctness (absolute paths, no relative paths)
2. Subdirectory completeness (all 6 subdirectories created)
3. Topic numbering sequence (no duplicates, no gaps)
4. Cross-command references (artifact paths resolve correctly)
5. Git commit paths (workflow summaries reference correct locations)

**Pass Criteria**: Zero regressions across 25 regression test cases

## Validation Gates Summary

| Gate | Phase | Command | Criteria | Rollback If |
|------|-------|---------|----------|-------------|
| Gate 1 | 1 | /report | 5/5 tests pass | <100% pass rate |
| Gate 2 | 2 | /plan | 5/5 tests pass | <100% pass rate |
| Gate 3 | 3 | /orchestrate | 5/5 workflow tests pass | <100% pass rate |
| Final Gate | 5 | System-wide | ≥47/50 tests pass (95%) | <95% pass rate |

**Rollback Policy**: If ANY gate fails, rollback that command immediately and investigate before proceeding.

## Dependencies

### Internal Dependencies

1. **unified-location-detection.sh** (Phase 6 Task Groups 1-2): Library must exist and be tested
2. **Phase 6 validation**: /supervise optimization should be validated in production (RECOMMENDED but not MANDATORY for this plan)
3. **Report 074**: Model metadata infrastructure in Claude Code core (Task tool supports model parameter)
4. **jq utility**: Recommended but not required (fallback sed parsing available)

### External Dependencies

None - all changes internal to .claude/ system

### Phase Dependencies

Progressive risk mitigation through sequential phases:

```
Phase 0 (Prerequisites)
  ↓
Phase 1 (/report) → Gate 1 → Pass required for Phase 2
  ↓
Phase 2 (/plan) → Gate 2 → Pass required for Phase 3
  ↓
Phase 3 (/orchestrate) → Gate 3 → Pass required for Phase 4
  ↓
Phase 4 (Model Metadata) → Independent, parallel with Phase 5
  ↓
Phase 5 (Integration Testing) → Final Gate → Pass required for production
  ↓
Phase 6 (Documentation) → Production-ready
```

## Monitoring and Success Metrics

### Token Usage Metrics

**Baseline** (before integration):
- /report: ~10k tokens (already optimized, utilities-based)
- /plan: ~10k tokens (already optimized, utilities-based)
- /orchestrate: 75,600 tokens (location-specialist agent)
- System-wide average: ~30k tokens per workflow initiation

**Target** (after integration):
- /report: ~10k tokens (no change expected)
- /plan: ~10k tokens (no change expected)
- /orchestrate: <11,000 tokens (85% reduction)
- System-wide average: ~15-20% reduction

### Cost Metrics

**Baseline** (current):
- /orchestrate cost: $0.68 per invocation (Sonnet 4.5, 75.6k tokens)
- Monthly cost (100 workflows): ~$68
- Annual cost: ~$816

**Target** (optimized):
- /orchestrate cost: <$0.03 per invocation (utilities + Haiku 4.5 fallback)
- Monthly cost (100 workflows): <$3
- Annual cost: <$36
- **Savings**: ~$780/year per 100 workflows

**System-wide** (with model metadata from Phase 4):
- Additional 15-20% cost reduction from Haiku/Sonnet optimization
- Combined savings: ~$3,400/year (estimate for 100 workflows/week)

### Performance Metrics

**Baseline** (current):
- /orchestrate Phase 0 execution: 25.2 seconds

**Target** (optimized):
- /orchestrate Phase 0 execution: <1 second
- **Speedup**: 20x+ faster

### Quality Metrics

**Targets**:
- Location accuracy: 100% correct (same as baseline)
- Subdirectory completeness: 100% (all 6 subdirectories)
- Path format: 100% absolute paths
- Downstream compatibility: 100% (no breaking changes)
- Integration test pass rate: ≥95%

## Backward Compatibility Strategy

**Duration**: 2 release cycles (~2-3 months)

### Phase A (Release N): Dual Support

- Unified library deployed alongside existing command-specific logic
- Feature flag controls implementation: `USE_UNIFIED_LOCATION="${USE_UNIFIED_LOCATION:-true}"`
- Both implementations maintained and tested
- Migration warnings logged for deprecated patterns

### Phase B (Release N+1): Deprecation Warnings

- Unified library becomes default
- Legacy implementations marked deprecated
- Warning messages when feature flag disables unified library
- Documentation updated to recommend unified approach

### Phase C (Release N+2): Removal

- Legacy implementations removed from codebase
- Feature flag removed
- Unified library becomes only implementation
- Migration guide published for external users

## Rollback Plan

### Trigger Conditions

Immediate rollback if ANY of:
1. Test pass rate drops below 95% (Final Gate)
2. Any individual command shows >5% failure rate
3. Token usage increases >10% for any command
4. User-reported location detection failures
5. Cross-command integration failures
6. Data loss or corruption (incorrect artifact paths)

### Rollback Procedure

**Per-Command Rollback**:
```bash
# Restore individual command
cp .claude/commands/report.md.backup-unified-integration .claude/commands/report.md

# Test rollback success
./.claude/tests/test_system_wide_location.sh
```

**System-Wide Rollback**:
```bash
# Restore all commands
for cmd in report plan orchestrate; do
  cp .claude/commands/${cmd}.md.backup-unified-integration .claude/commands/${cmd}.md
done

# Keep /supervise optimization (already validated in Phase 6)

# Verify rollback
./.claude/tests/test_system_wide_location.sh
```

**Feature Flag Rollback** (partial rollback):
```bash
# Disable unified library via environment variable
export USE_UNIFIED_LOCATION="false"

# Commands fallback to legacy implementations
# Maintains recent optimization benefits where possible
```

### Post-Rollback Actions

1. **Root Cause Analysis**: Review test failure logs, identify failure modes
2. **Fix and Retest**: Correct unified library or command integration
3. **Controlled Re-deployment**: Deploy to lowest-risk command first (/report), validate 48 hours before next command

## Notes

### Key Design Decisions

1. **Why Progressive Rollout (/report → /plan → /orchestrate)?**
   - Risk mitigation: Lowest to highest risk commands
   - Early validation: Catch integration issues before high-value /orchestrate
   - Rollback efficiency: Isolate failures to single command

2. **Why Validation Gates Between Phases?**
   - Prevent cascading failures across commands
   - Enable quick rollback of single command without affecting others
   - Build confidence progressively

3. **Why Feature Flag?**
   - Gradual production rollout (canary deployment)
   - A/B testing capability (compare unified vs legacy)
   - Emergency rollback without code changes

4. **Why 2 Release Cycles for Deprecation?**
   - Give external users time to adapt
   - Allow thorough production validation
   - Maintain stability during transition

### Future Enhancements

1. **File Locking for Concurrent Invocations**:
   - Add mutex lock in `get_next_topic_number()` if Phase 5 reveals race conditions
   - Use `flock` for atomic topic number calculation
   - Low priority (rare use case)

2. **Intelligent Topic Merging**:
   - Detect similar existing topics before creating new one
   - Suggest reusing existing topic directory
   - Reduce specs/ directory bloat

3. **Machine Learning Heuristic**:
   - Train model on historical workflows (complex vs simple)
   - Refine complexity detection beyond regex patterns
   - Requires >500 workflows for training data

### Standards Compliance

This plan adheres to all standards in `.claude/docs/`:

- ✓ **Imperative Language**: All required tasks use MUST/WILL/SHALL (see [Imperative Language Guide](.claude/docs/guides/imperative-language-guide.md))
- ✓ **Verification and Fallback**: MANDATORY VERIFICATION checkpoints after file creation (see [Verification and Fallback Pattern](.claude/docs/concepts/patterns/verification-fallback.md))
- ✓ **Directory Protocols**: 6-subdirectory topic structure preserved (see [Directory Protocols](.claude/docs/concepts/directory-protocols.md))
- ✓ **Progressive Organization**: Phase 3 (complexity 8/10) expanded to separate file (see Level 1 organization)
- ✓ **Phase Dependencies**: Structured for wave-based parallel execution where possible
- ✓ **Testing Protocols**: Comprehensive unit, integration, and regression testing

## Revision History

### 2025-10-23 - Initial Plan Creation

**Changes**: Created comprehensive implementation plan for Phase 6 Task Groups 3-8 completion

**Context**: Builds on completed foundational work (unified-location-detection.sh library from Task Groups 1-2)

**Standards Compliance**:
- Imperative language throughout (MUST/WILL/SHALL for requirements)
- MANDATORY VERIFICATION checkpoints in all command integration phases
- Progressive organization (Phase 3 expanded due to complexity 8/10)
- Validation gates between phases for risk mitigation
- Comprehensive rollback procedures documented

---
