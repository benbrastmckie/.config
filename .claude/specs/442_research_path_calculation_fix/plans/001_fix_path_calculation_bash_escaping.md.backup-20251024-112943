# Fix Path Calculation Bash Escaping Issues - Implementation Plan

## Metadata
- **Date**: 2025-10-24
- **Feature**: Fix bash command substitution escaping failures in workflow commands
- **Scope**: 4 workflow commands (/research, /report, /plan, /orchestrate) + documentation
- **Estimated Phases**: 5
- **Total Estimated Time**: 7.5 hours (1 working day)
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Research Reports**:
  - /home/benjamin/.config/.claude/specs/442_research_path_calculation_fix/reports/001_path_calculation_research/OVERVIEW.md
  - /home/benjamin/.config/.claude/specs/442_research_path_calculation_fix/reports/001_path_calculation_research/001_command_substitution_escaping_failure_analysis.md
  - /home/benjamin/.config/.claude/specs/442_research_path_calculation_fix/reports/001_path_calculation_research/002_shell_function_invocation_best_practices.md
  - /home/benjamin/.config/.claude/specs/442_research_path_calculation_fix/reports/001_path_calculation_research/003_alternative_library_sourcing_patterns.md
  - /home/benjamin/.config/.claude/specs/442_research_path_calculation_fix/reports/001_path_calculation_research/004_ai_agent_bash_tool_escaping_workarounds.md

## Overview

### Problem Statement

The `/research` command and 3 other workflow commands experience critical bash escaping failures when attempting to source libraries and capture function output via command substitution `$(...)`. The AI agent's Bash tool intentionally escapes this syntax as a security measure, converting `$(perform_location_detection ...)` to `\$(perform_location_detection ...)`, which causes syntax errors.

**Error Pattern**:
```
syntax error near unexpected token 'perform_location_detection'
```

**Root Cause**: The Bash tool applies shell escaping for security (preventing code injection), treating `$(...)` as dangerous syntax that must be escaped.

### Affected Components

**Commands** (4 total):
- `.claude/commands/research.md:87` - Primary failure point
- `.claude/commands/report.md:87` - Same pattern
- `.claude/commands/plan.md:485` - Same pattern
- `.claude/commands/orchestrate.md:431` - Same pattern

**Impact**: All hierarchical research and workflow orchestration commands are non-functional.

### Solution Approach

**Recommended Solution**: Pre-calculate all paths in parent command BEFORE delegating to agents (Reliability: 10/10).

**Key Principle**: Clear separation of concerns
- **Parent command**: Calculate paths, source libraries, orchestrate workflow
- **Agent**: Execute with provided absolute paths (no bash complexity)
- **Communication**: Simple interfaces (absolute paths, string parameters)

**Benefits**:
- Eliminates bash complexity in agent context
- Maintains 85% token reduction (11k vs 75.6k tokens)
- Preserves <1s execution time
- No library modifications needed
- Consistent with all existing successful command patterns

## Success Criteria

- [ ] Zero bash escaping errors in all 4 workflow commands
- [ ] All commands complete hierarchical research successfully
- [ ] Token usage remains <11k per location detection (85% reduction maintained)
- [ ] Path calculation executes in <1s
- [ ] Integration tests pass for all modified commands
- [ ] Documentation clearly explains bash tool limitations
- [ ] Command development guide updated with agent delegation patterns

## Technical Design

### Architectural Pattern

**Before (Broken)**:
```bash
# In agent prompt - FAILS with escaping error
LOCATION_JSON=$(perform_location_detection "$TOPIC" "false")
```

**After (Working)**:
```bash
# In parent command scope (before agent invocation)
source "${CLAUDE_CONFIG:-${HOME}/.config}/.claude/lib/unified-location-detection.sh"
LOCATION_JSON=$(perform_location_detection "$TOPIC" "false")

# Extract all needed paths
TOPIC_DIR=$(echo "$LOCATION_JSON" | jq -r '.topic_path')
REPORTS_DIR=$(echo "$LOCATION_JSON" | jq -r '.artifact_paths.reports')

# Calculate artifact paths
ARTIFACT_PATH="${REPORTS_DIR}/001_research/001_subtopic.md"

# Pass absolute path to agent (no calculation in agent)
Task {
  prompt: "
    **Report Path**: $ARTIFACT_PATH

    Create report at EXACT path using Write tool.
  "
}
```

### Working vs Broken Bash Constructs

**Working Constructs** (use freely):
- ✓ Arithmetic expansion: `VAR=$((expr))`
- ✓ Sequential commands: `cmd1 && cmd2`
- ✓ Pipes: `cmd1 | cmd2`
- ✓ Sourcing: `source file.sh`
- ✓ Conditionals: `[[ test ]] && action`
- ✓ Direct assignment: `VAR="value"`

**Broken Constructs** (NEVER use in agent contexts):
- ✗ Command substitution: `VAR=$(command)`
- ✗ Backticks: `` VAR=`command` ``
- ✗ Nested quotes in command substitution

### Performance Considerations

| Metric | Current (Broken) | After Fix | Target |
|--------|------------------|-----------|--------|
| Token Usage | N/A (fails) | 11k | <11k |
| Execution Time | N/A (fails) | <1s | <1s |
| Token Reduction | N/A | 85% | ≥85% |
| Reliability | 0% (always fails) | 100% | 100% |

## Implementation Phases

### Phase 1: Fix /research Command
**Objective**: Restore functionality to /research command as proof-of-concept
**Complexity**: Low
**Estimated Time**: 1 hour
**Priority**: Critical (immediate impact)

**Tasks**:
- [ ] Read current /research command implementation (.claude/commands/research.md)
- [ ] Identify STEP 2 section where path calculation occurs (around line 84-95)
- [ ] Refactor path calculation to occur before STEP 3 (agent invocation)
- [ ] Move `perform_location_detection` call to parent command scope
- [ ] Add explicit path extraction with jq for all needed paths
- [ ] Pre-calculate all subtopic report paths in parent scope
- [ ] Update agent prompts to receive absolute paths as parameters
- [ ] Remove all path calculation logic from agent prompts
- [ ] Add verification checkpoint after path calculation
- [ ] Test /research command with simple topic

**Implementation Details**:

**Location**: `.claude/commands/research.md` lines 82-149

**Current Code** (BROKEN):
```bash
### STEP 2 (REQUIRED BEFORE STEP 3) - Path Pre-Calculation

**EXECUTE NOW - Calculate Absolute Paths for All Subtopic Reports**

**Step 1: Get or Create Main Topic Directory**
```bash
# Source unified location detection library
source "${CLAUDE_CONFIG:-${HOME}/.config}/.claude/lib/unified-location-detection.sh"

# Perform location detection using unified library
LOCATION_JSON=$(perform_location_detection "$RESEARCH_TOPIC" "false")
```

**Replacement Code** (WORKING):
```markdown
### STEP 2 (REQUIRED BEFORE STEP 3) - Path Pre-Calculation

**MANDATORY: Execute these steps in PARENT COMMAND SCOPE (not in agent)**

This section MUST be executed by the orchestrating LLM using Bash tool directly,
NOT delegated to any agent. Path calculation uses command substitution which
is not available in agent contexts due to bash escaping.

```bash
# PARENT COMMAND EXECUTION - Step 1: Source library
source "${CLAUDE_CONFIG:-${HOME}/.config}/.claude/lib/unified-location-detection.sh"

# PARENT COMMAND EXECUTION - Step 2: Perform location detection
LOCATION_JSON=$(perform_location_detection "$RESEARCH_TOPIC" "false")

# PARENT COMMAND EXECUTION - Step 3: Extract base paths
TOPIC_DIR=$(echo "$LOCATION_JSON" | jq -r '.topic_path')
TOPIC_NAME=$(echo "$LOCATION_JSON" | jq -r '.topic_name')
REPORTS_DIR=$(echo "$LOCATION_JSON" | jq -r '.artifact_paths.reports')

# MANDATORY VERIFICATION - topic directory
if [ ! -d "$TOPIC_DIR" ]; then
  echo "ERROR: Location detection failed - directory not created: $TOPIC_DIR"
  exit 1
fi

echo "✓ VERIFIED: Topic directory exists at $TOPIC_DIR"

# PARENT COMMAND EXECUTION - Step 4: Calculate research subdirectory
SANITIZED_TOPIC=$(echo "$RESEARCH_TOPIC" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | sed 's/[^a-z0-9_]//g')
RESEARCH_SUBDIR="${REPORTS_DIR}/001_${SANITIZED_TOPIC}_research"

# PARENT COMMAND EXECUTION - Step 5: Create research subdirectory
mkdir -p "$RESEARCH_SUBDIR"

# MANDATORY VERIFICATION - research subdirectory
if [ ! -d "$RESEARCH_SUBDIR" ]; then
  echo "CRITICAL ERROR: Research subdirectory creation failed: $RESEARCH_SUBDIR"
  exit 1
fi

echo "✓ VERIFIED: Research subdirectory created at $RESEARCH_SUBDIR"

# PARENT COMMAND EXECUTION - Step 6: Calculate all subtopic report paths
declare -A SUBTOPIC_REPORT_PATHS
SUBTOPIC_NUM=1

for subtopic in "${SUBTOPICS[@]}"; do
  SANITIZED_SUBTOPIC=$(echo "$subtopic" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | sed 's/[^a-z0-9_]//g')
  REPORT_PATH="${RESEARCH_SUBDIR}/$(printf "%03d" "$SUBTOPIC_NUM")_${SANITIZED_SUBTOPIC}.md"

  SUBTOPIC_REPORT_PATHS["$subtopic"]="$REPORT_PATH"

  echo "  Subtopic: $subtopic"
  echo "  Path: $REPORT_PATH"

  SUBTOPIC_NUM=$((SUBTOPIC_NUM + 1))
done

# MANDATORY VERIFICATION - path pre-calculation complete
for subtopic in "${!SUBTOPIC_REPORT_PATHS[@]}"; do
  if [[ ! "${SUBTOPIC_REPORT_PATHS[$subtopic]}" =~ ^/ ]]; then
    echo "CRITICAL ERROR: Path for '$subtopic' is not absolute: ${SUBTOPIC_REPORT_PATHS[$subtopic]}"
    exit 1
  fi
done

echo "✓ VERIFIED: All paths are absolute"
echo "✓ VERIFIED: ${#SUBTOPIC_REPORT_PATHS[@]} report paths calculated"
echo "✓ VERIFIED: Ready to invoke research agents"
```

**CHECKPOINT**:
```
CHECKPOINT: Path pre-calculation complete
- Subtopics identified: ${#SUBTOPICS[@]}
- Report paths calculated: ${#SUBTOPIC_REPORT_PATHS[@]}
- All paths verified: ✓
- Proceeding to: Parallel agent invocation
```

**IMPORTANT**: All path calculation MUST complete successfully before STEP 3.
If any verification fails, STOP and report error to user.
```

**Updated Agent Invocation** (STEP 3):
```markdown
For EACH subtopic in SUBTOPICS array, invoke research-specialist agent:

**CRITICAL**: Use the pre-calculated absolute path from SUBTOPIC_REPORT_PATHS.
DO NOT calculate paths in agent prompt.

```yaml
Task {
  subagent_type: "general-purpose"
  description: "Research [SUBTOPIC] with mandatory artifact creation"
  timeout: 300000
  prompt: "
    Read and follow behavioral guidelines from:
    /home/benjamin/.config/.claude/agents/research-specialist.md

    **Research Topic**: [SUBTOPIC_DISPLAY_NAME]
    **Report Path**: ${SUBTOPIC_REPORT_PATHS[SUBTOPIC_KEY]}

    ^^^ ABSOLUTE PATH PROVIDED BY PARENT COMMAND - DO NOT RECALCULATE ^^^

    **STEP 1**: Verify absolute report path received (starts with /)
    **STEP 2**: Create report file at EXACT path using Write tool
    **STEP 3**: Conduct research and update report
    **STEP 4**: Return: REPORT_CREATED: [path]
  "
}
```
```

**Testing**:
```bash
# Test with simple topic
cd /home/benjamin/.config
./claude /research "test path calculation fix"

# Expected outcomes:
# - No bash escaping errors
# - Topic directory created: .claude/specs/NNN_test_path_calculation_fix/
# - Research subdirectory created: reports/001_test_path_calculation_fix_research/
# - All subtopic reports created successfully
# - OVERVIEW.md created

# Verify paths
ls -la .claude/specs/*/reports/001_*/

# Check for errors in output
# Should see: "✓ VERIFIED: All paths are absolute"
# Should NOT see: "syntax error near unexpected token"
```

**Validation Criteria**:
- [ ] Command completes without bash escaping errors
- [ ] All verification checkpoints pass
- [ ] All subtopic reports created at correct paths
- [ ] OVERVIEW.md synthesis report created
- [ ] Total execution time <30 seconds for 4 subtopics

---

### Phase 2: Apply Fix to /report Command
**Objective**: Restore /report command functionality using same pattern
**Complexity**: Low
**Estimated Time**: 30 minutes
**Dependencies**: Phase 1 complete and validated

**Tasks**:
- [ ] Read current /report command implementation (.claude/commands/report.md)
- [ ] Locate path calculation section (around line 87)
- [ ] Apply same pre-calculation pattern from Phase 1
- [ ] Update report path to be pre-calculated in parent scope
- [ ] Update agent prompt to receive absolute path parameter
- [ ] Test /report command with simple topic
- [ ] Verify report artifact created at correct location

**Implementation Details**:

**Location**: `.claude/commands/report.md` line 87

**Current Pattern** (BROKEN):
```bash
LOCATION_JSON=$(perform_location_detection "$TOPIC" "false")
```

**Replacement Pattern** (same as Phase 1):
```bash
# PARENT COMMAND EXECUTION - Pre-calculate all paths
source "${CLAUDE_CONFIG:-${HOME}/.config}/.claude/lib/unified-location-detection.sh"
LOCATION_JSON=$(perform_location_detection "$TOPIC" "false")

TOPIC_DIR=$(echo "$LOCATION_JSON" | jq -r '.topic_path')
REPORTS_DIR=$(echo "$LOCATION_JSON" | jq -r '.artifact_paths.reports')

# Calculate report-specific paths
SANITIZED_TOPIC=$(echo "$TOPIC" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | sed 's/[^a-z0-9_]//g')
REPORT_PATH="${REPORTS_DIR}/001_${SANITIZED_TOPIC}_report.md"

# Verify paths are absolute
[[ "$REPORT_PATH" =~ ^/ ]] || { echo "ERROR: Path not absolute"; exit 1; }

echo "✓ Report path calculated: $REPORT_PATH"
```

**Testing**:
```bash
# Test /report command
/report "test report generation"

# Expected: Report created at correct path
ls -la .claude/specs/*/reports/001_*_report.md
```

**Validation Criteria**:
- [ ] No bash escaping errors
- [ ] Report created at calculated path
- [ ] Path verification checkpoint passes
- [ ] Execution time <10 seconds

---

### Phase 3: Apply Fix to /plan and /orchestrate Commands
**Objective**: Complete the fix rollout to remaining workflow commands
**Complexity**: Low
**Estimated Time**: 1 hour (30 min each)
**Dependencies**: Phases 1-2 complete and validated

**Tasks**:
- [ ] Read /plan command implementation (.claude/commands/plan.md:485)
- [ ] Apply pre-calculation pattern to /plan command
- [ ] Update plan path calculation to parent scope
- [ ] Test /plan command with research report reference
- [ ] Read /orchestrate command implementation (.claude/commands/orchestrate.md:431)
- [ ] Apply pre-calculation pattern to /orchestrate command
- [ ] Update orchestrate path calculations for all workflow phases
- [ ] Test /orchestrate command with simple workflow

**Implementation Details**:

**Location 1**: `.claude/commands/plan.md` line 485

**Current Pattern** (BROKEN):
```bash
LOCATION_JSON=$(perform_location_detection "$FEATURE" "false")
```

**Replacement**: Apply same pattern with plan-specific paths
```bash
# Pre-calculate plan paths in parent scope
source "${CLAUDE_CONFIG:-${HOME}/.config}/.claude/lib/unified-location-detection.sh"
LOCATION_JSON=$(perform_location_detection "$FEATURE" "false")

TOPIC_DIR=$(echo "$LOCATION_JSON" | jq -r '.topic_path')
PLANS_DIR=$(echo "$LOCATION_JSON" | jq -r '.artifact_paths.plans')

# Calculate next plan number
EXISTING_PLANS=$(ls "$PLANS_DIR"/*.md 2>/dev/null | wc -l)
PLAN_NUM=$(printf "%03d" $((EXISTING_PLANS + 1)))

SANITIZED_FEATURE=$(echo "$FEATURE" | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | sed 's/[^a-z0-9_]//g')
PLAN_PATH="${PLANS_DIR}/${PLAN_NUM}_${SANITIZED_FEATURE}.md"

echo "✓ Plan path calculated: $PLAN_PATH"
```

**Location 2**: `.claude/commands/orchestrate.md` line 431

**Note**: /orchestrate may have multiple location detection calls for different workflow phases. Apply pattern to each occurrence.

**Testing**:
```bash
# Test /plan command
/plan "test feature implementation" /path/to/research/report.md

# Expected: Plan created at specs/NNN_test_feature_implementation/plans/001_*.md

# Test /orchestrate command
/orchestrate "implement simple feature"

# Expected: Complete workflow (research → plan → implement)
# All artifacts created in correct locations
```

**Validation Criteria**:
- [ ] /plan command completes without errors
- [ ] Plan file created at correct location
- [ ] /orchestrate command completes full workflow
- [ ] All workflow artifacts in correct locations
- [ ] No bash escaping errors in any phase

---

### Phase 4: Documentation Updates
**Objective**: Document bash tool limitations and establish architectural patterns
**Complexity**: Low
**Estimated Time**: 1.5 hours
**Dependencies**: Phases 1-3 complete

**Tasks**:
- [ ] Create new troubleshooting document for bash tool limitations
- [ ] Document problematic vs working bash constructs
- [ ] Provide clear examples of each limitation
- [ ] Update command development guide with agent delegation patterns
- [ ] Add section on path calculation best practices
- [ ] Document parent-agent separation of concerns principle
- [ ] Update behavioral injection pattern docs with bash limitations
- [ ] Add examples to library API reference showing pre-calculation pattern
- [ ] Review all command files for consistency in documentation

**Implementation Details**:

**File 1**: Create `.claude/docs/troubleshooting/bash-tool-limitations.md`

```markdown
# Bash Tool Limitations in AI Agent Context

## Overview

The AI agent's Bash tool applies security-driven escaping to prevent code injection attacks. This creates limitations on which bash constructs can be used in agent contexts.

## Root Cause

**Security Measure**: The Bash tool escapes potentially dangerous syntax like command substitution `$(...)` to prevent malicious code execution.

**Effect**: Standard bash patterns for capturing function output are not available in agent contexts.

## Problematic Constructs

### NEVER Use in Agent Prompts

**Command Substitution**: `VAR=$(command)`
```bash
# BROKEN - Will cause syntax error
LOCATION_JSON=$(perform_location_detection "topic" "false")

# Error: syntax error near unexpected token 'perform_location_detection'
```

**Backticks**: `` VAR=`command` ``
```bash
# BROKEN - Deprecated syntax, also escaped
RESULT=`some_command`
```

**Nested Quotes in Command Substitution**:
```bash
# BROKEN - Double escaping issues
VALUE=$(echo "$VAR" | grep "pattern")
```

## Working Constructs

### Safe to Use in Agent Contexts

**Arithmetic Expansion**: `VAR=$((expression))`
```bash
# WORKS - Not command substitution
COUNT=$((COUNT + 1))
NEXT_NUM=$((LAST_NUM + 1))
```

**Sequential Commands**: `cmd1 && cmd2`
```bash
# WORKS - Reliable chaining
mkdir -p "$DIR" && cd "$DIR" && ls -la
```

**Pipes**: `cmd1 | cmd2`
```bash
# WORKS - When not inside $()
echo "test" | tr '[:upper:]' '[:lower:]'
```

**File Sourcing**: `source file.sh`
```bash
# WORKS - Library sourcing is fine
source "${CLAUDE_CONFIG}/.claude/lib/unified-location-detection.sh"
```

**Conditionals**: `[[ test ]] && action`
```bash
# WORKS - Conditional execution
[[ -d "$DIR" ]] && echo "Directory exists"
```

**Direct Assignment**: `VAR="value"`
```bash
# WORKS - Simple assignment
TOPIC_PATH="/path/to/topic"
```

## Recommended Pattern

### Architectural Solution

**Principle**: Clear separation of concerns
- **Parent command**: Calculate paths, source libraries, orchestrate
- **Agent**: Execute with provided paths (no calculation)

**Pattern**:
```bash
# In parent command scope (BEFORE agent invocation):
source "${CLAUDE_CONFIG}/.claude/lib/unified-location-detection.sh"
LOCATION_JSON=$(perform_location_detection "$TOPIC" "false")

# Extract all needed paths
TOPIC_DIR=$(echo "$LOCATION_JSON" | jq -r '.topic_path')
ARTIFACT_PATH="${TOPIC_DIR}/artifacts/001_file.md"

# Pass to agent (no calculation in agent):
Task {
  prompt: "
    **File Path**: $ARTIFACT_PATH

    Create file at EXACT path using Write tool.
    DO NOT calculate or modify this path.
  "
}
```

## Performance Impact

**Pre-Calculation Approach**:
- Token usage: <11k (85% reduction vs agent-based detection)
- Execution time: <1s
- Reliability: 100% (no escaping issues)

**Benefits**:
- Maintains unified library architecture
- Clear separation of concerns
- No performance overhead
- Consistent with all successful commands

## Related Documentation

- [Command Development Guide](.claude/docs/guides/command-development-guide.md)
- [Behavioral Injection Pattern](.claude/docs/concepts/patterns/behavioral-injection.md)
- [Library API Reference](.claude/docs/reference/library-api.md)

## Examples from Codebase

**Successful Pattern** (all working commands use this):
- `/implement` - Pre-calculates phase file paths
- `/debug` - Pre-calculates report paths
- `/plan` - Pre-calculates plan file path (after Phase 3 fix)

**Fixed Pattern** (as of 2025-10-24):
- `/research` - Now pre-calculates all subtopic report paths
- `/report` - Now pre-calculates report path
- `/plan` - Fixed to pre-calculate plan path
- `/orchestrate` - Fixed to pre-calculate all workflow artifact paths
```

**File 2**: Update `.claude/docs/guides/command-development-guide.md`

Add new section after "Agent Delegation" section:

```markdown
## Agent Delegation Best Practices

### Path Calculation: Parent Responsibility

**CRITICAL**: All path calculations MUST occur in parent command scope, never in agent prompts.

**Why**: The AI agent's Bash tool escapes command substitution `$(...)` for security, making it unavailable in agent contexts.

**Pattern**:
```bash
# ✓ CORRECT: Calculate in parent command (before Task invocation)
source "${CLAUDE_CONFIG}/.claude/lib/unified-location-detection.sh"
LOCATION_JSON=$(perform_location_detection "$TOPIC" "false")
ARTIFACT_PATH=$(echo "$LOCATION_JSON" | jq -r '.artifact_paths.reports')/001_file.md

Task {
  prompt: "**File Path**: $ARTIFACT_PATH  # Absolute path provided"
}

# ✗ WRONG: Never calculate in agent prompt
Task {
  prompt: "
    LOCATION_JSON=$(perform_location_detection '$TOPIC' 'false')  # FAILS!
  "
}
```

### Parent-Agent Separation of Concerns

**Parent Command Responsibilities**:
- Source library files
- Call detection functions
- Extract and calculate all paths
- Create necessary directories
- Orchestrate workflow phases
- Pass absolute paths to agents

**Agent Responsibilities**:
- Receive absolute paths as parameters
- Execute specific tasks (write files, run analysis)
- Use simple bash constructs only (see Bash Tool Limitations)
- Return results via file writes or structured output
- No path calculation or complex bash operations

### Safe Parameter Types for Agents

**Safe** (use freely):
- Absolute file paths: `/home/user/.claude/specs/042_topic/plans/001_plan.md`
- Simple strings: `"research topic"`, `"Phase 1"`
- Boolean flags: `"true"`, `"false"`
- Numbers: `"42"`, `"3"`

**Unsafe** (never pass):
- Relative paths (agent may have different CWD)
- Command substitution expressions
- Complex bash expressions
- Unquoted variables with spaces

### Verification Pattern

Always verify paths before passing to agents:

```bash
# Calculate paths
ARTIFACT_PATH="/path/to/artifact.md"

# Verify absolute path
if [[ ! "$ARTIFACT_PATH" =~ ^/ ]]; then
  echo "ERROR: Path not absolute: $ARTIFACT_PATH"
  exit 1
fi

# Verify parent directory exists
ARTIFACT_DIR=$(dirname "$ARTIFACT_PATH")
if [[ ! -d "$ARTIFACT_DIR" ]]; then
  echo "ERROR: Parent directory does not exist: $ARTIFACT_DIR"
  exit 1
fi

echo "✓ Path verified: $ARTIFACT_PATH"

# Now safe to pass to agent
Task { prompt: "**File Path**: $ARTIFACT_PATH" }
```

## Related Patterns

- [Bash Tool Limitations](.claude/docs/troubleshooting/bash-tool-limitations.md) - Complete list of working vs broken constructs
- [Behavioral Injection Pattern](.claude/docs/concepts/patterns/behavioral-injection.md) - Agent invocation patterns
- [Library API Reference](.claude/docs/reference/library-api.md) - Unified location detection usage
```

**Testing**:
```bash
# Verify documentation is readable and correctly formatted
cat .claude/docs/troubleshooting/bash-tool-limitations.md

# Check that all links resolve
# Manually verify cross-references between docs
```

**Validation Criteria**:
- [ ] New troubleshooting doc created with clear examples
- [ ] Command development guide updated with delegation patterns
- [ ] All cross-references between docs are correct
- [ ] Documentation uses clear, imperative language
- [ ] Code examples are copy-paste ready
- [ ] No emojis in documentation content

---

### Phase 5: Integration Testing and Validation
**Objective**: Comprehensive testing to ensure all fixes work correctly
**Complexity**: Medium
**Estimated Time**: 2 hours
**Dependencies**: All previous phases complete

**Tasks**:
- [ ] Create test matrix for all 4 commands
- [ ] Test each command individually with various topics
- [ ] Test edge cases (special characters, long names, existing directories)
- [ ] Run integration test: /research → /plan → /implement workflow
- [ ] Verify token usage metrics maintained (<11k per detection)
- [ ] Verify execution time metrics maintained (<1s per detection)
- [ ] Run existing test suite to check for regressions
- [ ] Test error handling (invalid paths, missing directories)
- [ ] Verify checkpoint pattern works correctly
- [ ] Update test suite with new test cases for path calculation

**Test Cases**:

**Individual Command Tests**:
```bash
# Test 1: /research with simple topic
/research "bash escaping patterns"
# Expected: 4 subtopic reports + OVERVIEW.md created

# Test 2: /research with special characters
/research "path calculation (fix & validation)"
# Expected: Special chars sanitized, reports created

# Test 3: /report with simple topic
/report "testing strategies for shell scripts"
# Expected: Single report file created

# Test 4: /plan with research reference
/plan "implement logging system" /path/to/research/report.md
# Expected: Plan created with research reference

# Test 5: /orchestrate full workflow
/orchestrate "add configuration validation"
# Expected: Complete workflow (research → plan → implement → document)
```

**Edge Case Tests**:
```bash
# Test 6: Very long topic name
/research "this is a very long topic name with many words that should be properly sanitized and truncated if necessary"
# Expected: Topic name properly sanitized, path length reasonable

# Test 7: Topic with special characters
/research "testing: path/calculation & (escaping) [validation]"
# Expected: All special chars removed or replaced

# Test 8: Existing directory (should not fail)
/research "previously researched topic"
# Expected: Either reuses or creates new numbered directory

# Test 9: No jq installed (fallback parsing)
# Temporarily rename jq, test command
# Expected: Fallback grep/sed parsing works
```

**Integration Tests**:
```bash
# Test 10: Full research → plan workflow
/research "authentication patterns"
REPORT_PATH=$(ls .claude/specs/*/reports/*/OVERVIEW.md | tail -1)
/plan "implement OAuth2" "$REPORT_PATH"
# Expected: Plan references research report

# Test 11: Full orchestrate workflow
/orchestrate "add user registration feature"
# Expected: All phases complete without errors
```

**Performance Tests**:
```bash
# Test 12: Measure token usage
# Use logging to capture token counts per command
# Expected: <11k tokens per location detection

# Test 13: Measure execution time
time /research "performance test topic"
# Expected: Total time <30s for 4 subtopics (path calc <1s)
```

**Regression Tests**:
```bash
# Test 14: Run existing test suite
cd /home/benjamin/.config/.claude/tests
./test_command_integration.sh

# Test 15: Check other commands not affected
/implement --help
/debug --help
/test --help
# Expected: All commands work normally
```

**Error Handling Tests**:
```bash
# Test 16: Invalid characters in topic
/research "\0invalid\ntopic"
# Expected: Sanitized or clear error message

# Test 17: Missing library file
# Temporarily rename unified-location-detection.sh
/research "test"
# Expected: Clear error message about missing library

# Test 18: Insufficient permissions
# Create read-only specs directory
/research "permission test"
# Expected: Clear error about write permissions
```

**Testing**:
```bash
# Run all test cases
./run_all_validation_tests.sh

# Generate test report
./generate_test_report.sh > test_results.txt

# Expected: All tests pass, no escaping errors
```

**Validation Criteria**:
- [ ] All 18 test cases pass
- [ ] No bash escaping errors in any command
- [ ] Token usage <11k per detection (85% reduction maintained)
- [ ] Execution time <1s per path calculation
- [ ] Existing test suite passes (no regressions)
- [ ] Error handling works correctly for edge cases
- [ ] Integration tests complete full workflows successfully
- [ ] Performance metrics meet targets

---

## Testing Strategy

### Test Levels

**Unit Testing**:
- Path calculation logic in isolation
- Path sanitization functions
- Directory creation verification
- Absolute path validation

**Integration Testing**:
- End-to-end command execution
- Multi-command workflows (/research → /plan)
- Agent delegation with pre-calculated paths
- Cross-reference updates between artifacts

**Regression Testing**:
- Existing test suite: `.claude/tests/test_command_integration.sh`
- Other commands not affected by changes
- Library functions still work correctly
- Performance metrics maintained

**Performance Testing**:
- Token usage per location detection
- Execution time per path calculation
- Overall workflow completion time
- Context usage in hierarchical workflows

### Test Matrix

| Command | Topic | Expected Outcome | Validation |
|---------|-------|-----------------|------------|
| /research | "simple topic" | 4 reports + OVERVIEW | ✓ Files exist |
| /research | "special chars (& /)" | Sanitized paths | ✓ No errors |
| /report | "test report" | Single report file | ✓ File exists |
| /plan | "feature" + report | Plan with reference | ✓ Report linked |
| /orchestrate | "full workflow" | All artifacts | ✓ Complete |

### Acceptance Criteria

**Functional Requirements**:
- All 4 commands execute without bash escaping errors
- All paths calculated correctly (absolute, sanitized)
- All artifacts created at expected locations
- Agent delegation works with pre-calculated paths

**Performance Requirements**:
- Token usage: <11k per location detection (85% reduction)
- Execution time: <1s per path calculation
- Workflow time: No significant increase vs current (when working)

**Quality Requirements**:
- No regressions in existing functionality
- Clear error messages for failures
- Documentation complete and accurate
- Code follows project standards (2-space indent, bash best practices)

## Documentation Requirements

### Files to Create

1. **`.claude/docs/troubleshooting/bash-tool-limitations.md`**
   - Complete list of problematic vs working constructs
   - Clear examples with explanations
   - Recommended patterns section
   - Performance impact analysis

2. **Command Development Guide Updates**
   - New section on agent delegation best practices
   - Path calculation patterns
   - Parent-agent separation of concerns
   - Verification patterns

### Files to Update

1. **`.claude/commands/research.md`**
   - Add comments explaining parent scope execution
   - Document verification checkpoints
   - Clarify agent prompt parameter usage

2. **`.claude/commands/report.md`**
   - Same updates as research.md

3. **`.claude/commands/plan.md`**
   - Same updates as research.md

4. **`.claude/commands/orchestrate.md`**
   - Same updates as research.md
   - Additional notes on multi-phase path calculations

5. **`.claude/docs/concepts/patterns/behavioral-injection.md`**
   - Add section on bash limitations
   - Link to troubleshooting doc

6. **`.claude/docs/reference/library-api.md`**
   - Add examples showing pre-calculation pattern
   - Clarify parent vs agent usage contexts

## Dependencies

### External Dependencies
- `jq` - JSON parsing for location detection output (with grep/sed fallback)
- `bash` ≥4.0 - For associative arrays and modern constructs
- `git` - For project root detection in library

### Internal Dependencies
- `.claude/lib/unified-location-detection.sh` - Core library (no changes needed)
- `.claude/lib/topic-decomposition.sh` - Used by /research (no changes needed)
- `.claude/agents/research-specialist.md` - Agent definitions (no changes needed)
- `.claude/agents/research-synthesizer.md` - Agent definitions (no changes needed)

### Affected Components
- 4 workflow commands (research, report, plan, orchestrate)
- 2 documentation files (new troubleshooting doc, updated guide)
- Test suite (new test cases)

## Risk Assessment and Mitigation

### High Risk: Breaking Existing Workflows

**Risk**: Changes to command files could break existing /implement workflows or other automations.

**Mitigation**:
- Test each command individually before moving to next
- Keep backups of working command versions
- Rollback strategy: Restore from git if issues arise
- Validation: Run existing test suite after each phase

**Rollback Plan**:
```bash
# If Phase N causes issues, rollback:
git checkout HEAD~1 .claude/commands/[command].md
# Test restored version
# Debug issue before proceeding
```

### Medium Risk: Performance Regression

**Risk**: Pre-calculation might add overhead or increase token usage.

**Mitigation**:
- Measure token usage before and after changes
- Measure execution time for path calculation
- Validate that 85% token reduction is maintained
- Performance tests in Phase 5

**Monitoring**:
```bash
# Check token usage in logs
grep "token usage" .claude/data/logs/*.log

# Time path calculation
time /research "performance test"
```

### Low Risk: Documentation Drift

**Risk**: Documentation updates might not stay in sync with code changes.

**Mitigation**:
- Update docs in same phase as code changes
- Include doc validation in test criteria
- Cross-reference between docs to catch dead links
- Regular doc review as part of validation

### Low Risk: Edge Cases Not Covered

**Risk**: Special characters, long names, or unusual paths might still fail.

**Mitigation**:
- Comprehensive edge case testing in Phase 5
- Sanitization functions handle special characters
- Path length validation (warn if >200 chars)
- Clear error messages for unsupported cases

## Notes

### Key Decisions

**Decision 1**: Use pre-calculation (Rank 1) over other alternatives
- **Rationale**: Highest reliability (10/10), lowest implementation effort, maintains existing architecture
- **Alternatives Considered**: Wrapper scripts (Rank 2), multi-step calls (Rank 3), temp files (Rank 4)
- **Trade-offs**: None - clear winner across all metrics

**Decision 2**: No library modifications needed
- **Rationale**: unified-location-detection.sh works perfectly in parent command scope
- **Benefit**: Zero backward compatibility risk, all existing callers unaffected

**Decision 3**: Create new troubleshooting doc instead of updating existing docs
- **Rationale**: Bash tool limitations are a distinct topic requiring dedicated documentation
- **Benefit**: Easy to find, focused content, better discoverability

**Decision 4**: Fix commands in sequence (research → report → plan → orchestrate)
- **Rationale**: Allows validation at each step, minimizes blast radius if issues arise
- **Benefit**: Can catch issues early before affecting all commands

### Architecture Principles Reinforced

**Separation of Concerns**:
- Parent commands: Orchestration and path calculation
- Agents: Execution with provided context
- Clear interface: Absolute paths as parameters

**Library-Based Architecture**:
- Unified location detection maintained
- 85% token reduction preserved
- Single source of truth for path logic
- Consistent behavior across commands

**Security-Aware Design**:
- Respect bash tool's security constraints
- Work within limitations, don't fight them
- Design patterns that avoid problematic constructs

### Future Considerations

**Template System**:
- Could create reusable template for pre-calculation pattern
- Reduces copy-paste between command files
- Consider for future refactoring (outside scope of this plan)

**Library Enhancement**:
- Could add convenience functions that work in parent scope
- Example: `extract_paths_from_json()` function
- Consider for future improvement (outside scope of this plan)

**Command Generator**:
- Could create tool to scaffold new commands with correct patterns
- Automatically includes pre-calculation boilerplate
- Consider for future tooling (outside scope of this plan)

### Lessons Learned

**What Worked**:
- Hierarchical research pattern provided comprehensive analysis
- 4 parallel specialist agents identified all aspects of the problem
- OVERVIEW.md synthesis revealed clear solution

**What to Improve**:
- Earlier detection of bash tool limitations could have prevented this issue
- Better documentation of agent delegation patterns from the start
- More explicit command development templates/guides

**Broader Implications**:
- All future commands should follow parent-agent separation pattern
- Bash tool limitations should be documented prominently
- Command development guide should include security constraints
