# /supervise Command Improvement Implementation Plan

## Metadata
- **Date**: 2025-10-28
- **Feature**: /supervise command optimization for efficient, economical workflow with minimal well-formatted output
- **Scope**: Error handling streamlining, output management, diagnostic quality, code size reduction
- **Estimated Phases**: 5
- **Estimated Hours**: 18-26 hours
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Structure Level**: 0
- **Complexity Score**: 82.0
- **Research Reports**:
  - .claude/specs/507_supervise_command_improvement_research_and_plan/reports/001_orchestrator_best_practices.md
  - .claude/specs/507_supervise_command_improvement_research_and_plan/reports/002_supervise_command_analysis.md
  - .claude/specs/507_supervise_command_improvement_research_and_plan/reports/003_improvement_opportunities.md

## Overview

The /supervise command (2,274 lines) is a 7-phase orchestration command with verified architectural compliance (>90% agent delegation rate, 100% file creation reliability). This plan addresses three critical improvement areas: (1) adopt fail-fast error handling to eliminate retry complexity while maintaining reliability, (2) extract documentation to reduce file size by 20% and improve maintainability, (3) implement explicit context pruning to achieve <30% context usage target throughout 7-phase workflows. These improvements align with /coordinate command patterns (2,500 lines, fail-fast philosophy) and directly support user goals of efficient/economical workflow with minimal well-formatted output.

## Research Summary

Analysis of three research reports reveals:

**From Orchestrator Best Practices** (001):
- Fail-fast error handling achieves 100% bootstrap reliability through immediate error exposure
- Pure orchestration pattern requires Phase 0 path pre-calculation before any agent invocations
- Behavioral injection with imperative Task invocations maintains >90% delegation rate
- Mandatory verification checkpoints with structured diagnostics enable self-documenting errors
- Context management through metadata extraction and explicit pruning achieves <30% usage

**From Supervise Command Analysis** (002):
- Current implementation: 2,274 lines with 7 libraries sourced individually (126 lines total)
- Library consolidation opportunity: 126 lines → 12 lines (90% reduction via source_required_libraries())
- Phase 0 path calculation: 338 lines vs 157 in /coordinate (documentation extraction needed)
- Error handling: Retry-based approach (complexity overhead) vs fail-fast (immediate feedback)
- Context management: Library sourced but not explicitly called after phase completion

**From Improvement Opportunities** (003):
- Priority 1: Output file management (generic supervise_output.md → structured specs directory)
- Priority 2: Error handling streamlining (remove retry infrastructure, adopt fail-fast)
- Priority 3: Diagnostic message quality (5-section structured template from /coordinate)
- Priority 4: Code size reduction (library sourcing -30 lines, documentation extraction -400 lines)
- Priority 5: Wave-based execution (40-60% time savings, defer if resources constrained)

**Recommended Implementation Approach**:
All research reports converge on fail-fast error handling as highest-impact improvement (easier debugging, faster feedback, predictable behavior). Documentation extraction and context pruning are complementary optimizations that improve maintainability without affecting execution reliability.

## Success Criteria

- [ ] Fail-fast error handling adopted: Zero retry calls in verification checkpoints
- [ ] Structured diagnostic template: All 6 verification checkpoints use 5-section format
- [ ] Documentation extracted: /supervise command reduced to ~1,800 lines (20% reduction)
- [ ] External guides created: supervise-guide.md (usage patterns) and supervise-phases.md (phase reference)
- [ ] Explicit context pruning: apply_pruning_policy() called after Phases 2-5
- [ ] Library sourcing consolidated: source_required_libraries() replaces 7 individual blocks
- [ ] Testing validates: All tests passing, delegation rate >90%, file creation 100%
- [ ] User goals validated: Minimal output (smaller file), well-formatted (structured diagnostics), efficient (fail-fast feedback)

## Technical Design

### Architecture Changes

**Error Handling Transformation** (Fail-Fast Philosophy):
```
Current:                           Target:
┌─────────────────────┐          ┌─────────────────────┐
│ Verification Check  │          │ Verification Check  │
│  retry_with_backoff │          │  [ -f ] && [ -s ]  │
│  classify_error     │   ──►    │  Structured Diag    │
│  nested retry logic │          │  exit 1             │
│  63 lines per check │          │  47 lines per check │
└─────────────────────┘          └─────────────────────┘
```

**Documentation Extraction** (Maintainability):
```
Current:                           Target:
supervise.md (2,274 lines)       supervise.md (1,800 lines)
├─ Inline usage patterns         ├─ Reference links
├─ Inline phase docs             ├─ Executable code only
├─ Inline examples               │
└─ Executable code               docs/guides/supervise-guide.md
                                 ├─ Usage patterns
                          ──►    ├─ Examples
                                 └─ Workflows

                                 docs/reference/supervise-phases.md
                                 ├─ Phase structure
                                 ├─ Agent API
                                 └─ Success criteria
```

**Context Management Integration** (Performance):
```
Phase Boundaries:
Phase 1 → Checkpoint → [NEW] store_phase_metadata()
Phase 2 → Checkpoint → [NEW] apply_pruning_policy("planning", scope)
Phase 3 → Checkpoint → [NEW] apply_pruning_policy("implementation", scope)
Phase 4 → Checkpoint → [NEW] apply_pruning_policy("testing", scope)
Phase 5 → Checkpoint → [NEW] apply_pruning_policy("debug", scope)
Phase 6 → Summary    → [NEW] apply_pruning_policy("final", scope)

Target: <30% context usage throughout workflow
```

**Library Sourcing Consolidation**:
```bash
# Before (126 lines for 7 libraries):
if [ -f "$SCRIPT_DIR/../lib/workflow-detection.sh" ]; then
  source "$SCRIPT_DIR/../lib/workflow-detection.sh"
else
  echo "ERROR: Required library not found..."
  [... 15 diagnostic lines ...]
  exit 1
fi
# [Repeated 7 times]

# After (12 lines total):
source "$SCRIPT_DIR/../lib/library-sourcing.sh"
if ! source_required_libraries; then
  exit 1  # Error already reported
fi
```

### Component Integration

**Verification Checkpoint Template** (Applied to 6 locations):
```bash
# Standard 5-section diagnostic format
if [ -f "$EXPECTED_PATH" ] && [ -s "$EXPECTED_PATH" ]; then
  echo "✅ VERIFIED: [Artifact] created successfully"
else
  echo "❌ ERROR: [What failed]"
  echo "   Expected: [What was supposed to happen]"
  echo "   Found: [What actually happened]"
  echo ""
  echo "DIAGNOSTIC INFORMATION:"
  echo "  - [Specific check that failed]"
  echo "  - [File system state]"
  echo "  - [Why this might have happened]"
  echo ""
  echo "What to check next:"
  echo "  1. [First debugging step]"
  echo "  2. [Second debugging step]"
  echo ""
  echo "Example commands to debug:"
  echo "  ls -la [path]"
  echo "  cat [file]"
  exit 1
fi
```

**Context Pruning Integration Points**:
- After Phase 1: Store metadata only (research needed for planning)
- After Phase 2: Prune research if workflow=research-and-plan
- After Phase 3: Prune research and planning (retain implementation)
- After Phase 4: Store test metadata (may need for debugging)
- After Phase 5: Prune test output after debug complete
- After Phase 6: Final pruning (retain summary path only)

### File Structure

**Modified Files**:
- `.claude/commands/supervise.md` - Main command file (2,274 → ~1,800 lines)

**New Files**:
- `.claude/docs/guides/supervise-guide.md` - Usage patterns and examples (~200 lines)
- `.claude/docs/reference/supervise-phases.md` - Phase structure and API (~150 lines)

**Test Files**:
- `.claude/tests/test_orchestration_commands.sh` - Existing test suite (verify no regression)
- `.claude/tests/test_supervise_improvements.sh` - New test cases for fail-fast behavior

## Implementation Phases

### Phase 0: Preparation and Baseline Validation
dependencies: []

**Objective**: Validate current /supervise functionality and establish baseline metrics before modifications.

**Complexity**: Low

Tasks:
- [ ] Run existing test suite: `.claude/tests/test_orchestration_commands.sh` (verify all tests passing)
- [ ] Document current metrics: File size (2,274 lines), delegation rate (>90%), verification checkpoint count (6)
- [ ] Create backup: `cp .claude/commands/supervise.md .claude/commands/supervise.md.backup-$(date +%Y%m%d)`
- [ ] Identify verification checkpoint locations: Phases 1-6 (grep "MANDATORY VERIFICATION" supervise.md)
- [ ] Create feature branch: `git checkout -b feature/supervise-improvements`

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

Testing:
```bash
# Baseline test suite
cd /home/benjamin/.config/.claude/tests
./test_orchestration_commands.sh

# Expected: All tests pass (baseline validation)
```

**Expected Duration**: 1-2 hours

**Phase 0 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(507): complete Phase 0 - Baseline Validation`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 1: Adopt Fail-Fast Error Handling
dependencies: [0]

**Objective**: Replace retry-based verification with fail-fast pattern and structured diagnostics across all 6 verification checkpoints.

**Complexity**: High

Tasks:
- [ ] Read /coordinate verification patterns: Lines 872-948 (reference implementation)
- [ ] Create diagnostic template: 5-section format (ERROR, Expected/Found, Diagnostic Info, What to Check, Example Commands)
- [ ] Update Phase 1 verification (Research): Remove retry_with_backoff, apply template (lines 877-951 in supervise.md)
- [ ] Update Phase 2 verification (Planning): Remove retry_with_backoff, apply template (lines ~1220-1280)
- [ ] Update Phase 3 verification (Implementation): Remove retry_with_backoff, apply template (lines ~1380-1440)
- [ ] Update Phase 4 verification (Testing): Remove retry_with_backoff, apply template (lines ~1540-1600)
- [ ] Update Phase 5 verification (Debug): Remove retry_with_backoff, apply template (lines ~1680-1740)
- [ ] Update Phase 6 verification (Documentation): Remove retry_with_backoff, apply template (lines ~1840-1900)
- [ ] Remove error-handling.sh retry infrastructure references: Search for "retry_with_backoff" and "classify_and_retry"
- [ ] Update command header: Replace "Auto-Recovery" section with "Fail-Fast Error Handling" (lines 171-191)

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

Testing:
```bash
# Test fail-fast behavior with intentional failure
cd /home/benjamin/.config
# Create test scenario: Invoke /supervise with missing dependency
# Expected: Immediate error with structured diagnostic (no retry delay)

# Verify error message structure
grep -A 20 "MANDATORY VERIFICATION" .claude/commands/supervise.md | grep -E "(ERROR:|Expected:|Found:|DIAGNOSTIC|What to check|Example commands)"
# Expected: All 6 verification checkpoints show 5-section structure
```

**Expected Duration**: 6-8 hours

**Phase 1 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(507): complete Phase 1 - Fail-Fast Error Handling`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 2: Extract Documentation to External Files
dependencies: [1]

**Objective**: Reduce supervise.md file size by 20% through documentation extraction to external guide files.

**Complexity**: Medium

Tasks:
- [ ] Create `.claude/docs/guides/supervise-guide.md`: Usage patterns, examples, workflows (extract from lines 116-173, 2169-2220)
- [ ] Create `.claude/docs/reference/supervise-phases.md`: Phase structure, agent API, success criteria (extract from lines 163-170, 2231-2275)
- [ ] Update supervise.md header: Replace inline docs with reference links to guide files (update lines 116-220)
- [ ] Verify cross-references: All links from supervise.md to guide files work correctly
- [ ] Update CLAUDE.md: Add references to new guide files in project_commands section (line 2100-2200 in CLAUDE.md)
- [ ] Verify file size reduction: `wc -l .claude/commands/supervise.md` (target: ~1,800 lines from 2,274)

Testing:
```bash
# Verify documentation accessibility
cat .claude/docs/guides/supervise-guide.md
cat .claude/docs/reference/supervise-phases.md

# Verify links work
grep -o '\[.*\](.claude/docs/.*\.md)' .claude/commands/supervise.md
# Follow each link manually to verify

# Verify file size reduction
wc -l .claude/commands/supervise.md
# Expected: 1,750-1,850 lines (20% reduction from 2,274)
```

**Expected Duration**: 3-4 hours

**Phase 2 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(507): complete Phase 2 - Documentation Extraction`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 3: Implement Explicit Context Pruning
dependencies: [1]

**Objective**: Add explicit context pruning calls after each phase to achieve <30% context usage target.

**Complexity**: Medium

Tasks:
- [ ] Review context-pruning.sh library: Read `.claude/lib/context-pruning.sh` to understand apply_pruning_policy() function
- [ ] Add pruning after Phase 1: `store_phase_metadata "phase_1" "complete" "$PHASE_1_ARTIFACTS"` (after line ~1098)
- [ ] Add pruning after Phase 2: `apply_pruning_policy "planning" "$WORKFLOW_SCOPE"` + echo context reduction (after line ~1280)
- [ ] Add pruning after Phase 3: `apply_pruning_policy "implementation" "$WORKFLOW_SCOPE"` (after line ~1440)
- [ ] Add pruning after Phase 4: `store_phase_metadata "phase_4" "complete" "$TEST_RESULTS"` (after line ~1600)
- [ ] Add pruning after Phase 5: `apply_pruning_policy "debug" "$WORKFLOW_SCOPE"` (after line ~1740)
- [ ] Add final pruning after Phase 6: `apply_pruning_policy "final" "$WORKFLOW_SCOPE"` (after line ~1900)
- [ ] Update design decisions note: Remove "context pruning not implemented" note (lines 477-479)
- [ ] Add context usage reporting: Echo "Context usage: X%" after each pruning operation

Testing:
```bash
# Verify pruning functions called
grep "apply_pruning_policy\|store_phase_metadata" .claude/commands/supervise.md
# Expected: 6 calls (one after each phase)

# Verify context-pruning.sh sourced
grep "context-pruning.sh" .claude/commands/supervise.md
# Expected: Library sourced in Phase 0

# Integration test: Run full workflow and monitor context
# (Manual verification - context metrics not easily automated)
```

**Expected Duration**: 3-4 hours

**Phase 3 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(507): complete Phase 3 - Context Pruning Integration`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 4: Consolidate Library Sourcing
dependencies: [1]

**Objective**: Replace 7 individual library sourcing blocks with consolidated source_required_libraries() function.

**Complexity**: Low

Tasks:
- [ ] Read library-sourcing.sh: Understand source_required_libraries() function API (file: `.claude/lib/library-sourcing.sh`)
- [ ] Replace 7 individual sourcing blocks: Lines 242-376 in supervise.md with consolidated pattern from /coordinate (lines 355-386)
- [ ] Update function verification: Simplify error message to /coordinate pattern (lines 413-469 → briefer diagnostics)
- [ ] Remove function-to-library mapping: Lines 330-348 (verbose mapping not needed with fail-fast)
- [ ] Add single reference: Link to `.claude/docs/reference/library-api.md` instead of inline mapping
- [ ] Verify file size reduction: Target -114 lines (126 lines → 12 lines for sourcing)

Testing:
```bash
# Verify libraries loaded correctly
grep "source_required_libraries" .claude/commands/supervise.md
# Expected: Single consolidated call

# Verify required functions available
.claude/tests/test_orchestration_commands.sh
# Expected: All tests pass (library loading validated)

# Verify line count reduction
wc -l .claude/commands/supervise.md
# Expected: ~1,700 lines (after Phase 2 + Phase 4 reductions)
```

**Expected Duration**: 2-3 hours

**Phase 4 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(507): complete Phase 4 - Library Sourcing Consolidation`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 5: Validation and Testing
dependencies: [1, 2, 3, 4]

**Objective**: Comprehensive validation of all improvements and verification of user goals met.

**Complexity**: Medium

Tasks:
- [ ] Run full test suite: `.claude/tests/test_orchestration_commands.sh` (verify no regression)
- [ ] Create new test: `.claude/tests/test_supervise_improvements.sh` covering fail-fast behavior and structured diagnostics
- [ ] Validate delegation rate: Run /supervise with test workflow, verify >90% agent delegation
- [ ] Validate file creation: Verify 100% file creation reliability (all artifacts at expected paths)
- [ ] Validate context usage: Run full workflow, verify <30% context usage (manual observation)
- [ ] Validate file size: `wc -l .claude/commands/supervise.md` (target: ~1,700 lines, 25% reduction)
- [ ] Validate user goals: Minimal output (smaller file ✓), well-formatted (structured diagnostics ✓), efficient (fail-fast ✓)
- [ ] Update CLAUDE.md: Document /supervise improvements in hierarchical_agent_architecture section
- [ ] Create summary: Document baseline vs improved metrics in implementation summary
- [ ] Merge feature branch: `git checkout spec_org && git merge feature/supervise-improvements`

Testing:
```bash
# Comprehensive test suite
cd /home/benjamin/.config/.claude/tests
./test_orchestration_commands.sh
./test_supervise_improvements.sh

# Manual workflow test
cd /home/benjamin/.config
# Run: /supervise "research auth patterns for planning"
# Verify:
#   - Files created in specs/NNN_topic/ (not supervise_output.md)
#   - Errors (if any) use 5-section structure
#   - No retry delays observed
#   - File size ~1,700 lines

# Metrics validation
echo "=== Improvement Metrics ==="
echo "File size: $(wc -l .claude/commands/supervise.md | awk '{print $1}') lines (target: ~1,700)"
echo "Delegation rate: >90% (verified via test suite)"
echo "File creation: 100% (verified via test suite)"
echo "Context usage: <30% (manual verification during workflow)"
```

**Expected Duration**: 4-5 hours

**Phase 5 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(507): complete Phase 5 - Validation and Testing`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

## Testing Strategy

### Unit Testing
- **Verification Checkpoint Tests**: Create test cases triggering each verification checkpoint (6 tests)
- **Diagnostic Message Format**: Validate 5-section structure present in all error paths
- **Library Sourcing**: Verify source_required_libraries() loads all 7 required libraries
- **Context Pruning**: Verify apply_pruning_policy() called after Phases 2-6

### Integration Testing
- **Full Workflow**: Run /supervise with research-and-plan workflow (most common)
- **Error Scenarios**: Test with missing dependencies, permission errors, timeout scenarios
- **Delegation Rate**: Verify >90% agent delegation maintained after changes
- **File Creation**: Verify 100% reliability (all artifacts at expected paths)

### Regression Testing
- **Existing Test Suite**: `.claude/tests/test_orchestration_commands.sh` (baseline validation)
- **Cross-Command Compatibility**: Verify /supervise improvements don't affect /coordinate or /orchestrate

### Performance Testing
- **File Size**: Validate 20-25% reduction (2,274 → ~1,700 lines)
- **Context Usage**: Manual observation during full workflow (target: <30%)
- **Error Feedback Speed**: Compare retry-based (3-5s delay) vs fail-fast (<1s immediate)

### Test Commands
```bash
# Unit tests
cd /home/benjamin/.config/.claude/tests
./test_orchestration_commands.sh  # Existing suite
./test_supervise_improvements.sh  # New test cases

# Integration test
cd /home/benjamin/.config
# Invoke: /supervise "research auth patterns for planning"
# Verify: Artifacts in specs/NNN_topic/, structured diagnostics, no retry delays

# Regression test
cd /home/benjamin/.config/.claude/tests
./test_orchestration_commands.sh --all  # Full suite
```

## Documentation Requirements

### Command Documentation
- **Updated**: `.claude/commands/supervise.md` - Reflect fail-fast philosophy, remove retry references
- **New**: `.claude/docs/guides/supervise-guide.md` - Usage patterns and examples
- **New**: `.claude/docs/reference/supervise-phases.md` - Phase structure and API

### Standards Documentation
- **Updated**: `CLAUDE.md` - Add references to new guide files in project_commands section
- **Updated**: `CLAUDE.md` - Update hierarchical_agent_architecture section with /supervise improvements

### Test Documentation
- **New**: `.claude/tests/test_supervise_improvements.sh` - Document test cases for fail-fast behavior
- **Updated**: `.claude/tests/README.md` - Reference new test suite

### Implementation Documentation
- **Summary File**: Create implementation summary in `specs/507_supervise_command_improvement_research_and_plan/summaries/` documenting:
  - Baseline metrics (file size, delegation rate, verification approach)
  - Improvement metrics (file size reduction, error feedback speed, code simplification)
  - User goals validation (minimal output, well-formatted, efficient)

## Dependencies

### External Dependencies
- **Library Files**: All 7 libraries must remain compatible with consolidated sourcing pattern
  - workflow-detection.sh
  - error-handling.sh (used for classify_error, not retry_with_backoff)
  - checkpoint-utils.sh
  - unified-logger.sh
  - unified-location-detection.sh
  - metadata-extraction.sh
  - context-pruning.sh
  - library-sourcing.sh (consolidation function)

### Internal Dependencies
- **Phase Dependencies**: Phases 1-4 can execute independently after Phase 0, Phase 5 depends on all
- **Testing Dependencies**: Phase 5 validation requires all prior phases complete
- **Documentation Dependencies**: Phase 2 (extraction) should complete before Phase 5 (validation)

### Tool Dependencies
- **Read**: Access existing command files and library files
- **Write**: Create new guide files and test files
- **Edit**: Modify supervise.md verification checkpoints and library sourcing
- **Bash**: Run test suites and validation commands
- **Grep**: Locate verification checkpoints and library references

### Project Standards
- **Code Standards**: 2-space indentation, bash -e for error handling, ShellCheck compliance
- **Testing Protocols**: Use `.claude/tests/test_*.sh` pattern, aim for >80% coverage
- **Documentation Policy**: Update README files, follow CommonMark spec, no emojis in files
- **Git Workflow**: Feature branches, atomic commits per phase, test before commit
