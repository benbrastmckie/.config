# /coordinate Command Implementation Plan

## Metadata
- **Date**: 2025-10-27
- **Feature**: New /coordinate command - Clean, economical multi-agent workflow orchestrator
- **Scope**: Create improved alternative to /supervise and /orchestrate with wave-based implementation, economical design, and all standards compliance
- **Estimated Phases**: 7
- **Estimated Hours**: 32-40 hours
- **Structure Level**: 0
- **Complexity Score**: 68.0
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Research Reports**:
  - [Claude Code Subagents Documentation](/home/benjamin/.config/.claude/specs/489_research_claude_code_subagents_documentation_for_improvement_opportunities/reports/489_overview.md)
  - [/supervise Command Analysis](/home/benjamin/.config/.claude/specs/490_supervise_command_analysis_and_improvements/reports/001_supervise_command_analysis_and_improvements/OVERVIEW.md)

## Overview

Create a new `/coordinate` command that provides clean, economical multi-agent workflow orchestration by combining the best elements of `/supervise` (proven 95% architectural compliance, clean 2,177-line structure) with `/orchestrate`'s wave-based parallel implementation (40-60% time savings), while maintaining reasonable file size (target: 2,500-3,000 lines) and fixing all identified standards violations.

The command will orchestrate end-to-end development workflows (research → plan → implement → test → debug → document) using behavioral injection pattern, metadata extraction for context reduction, and imperative agent invocation without code-fenced examples.

## Research Summary

**From Report 489 (Claude Code Subagents Documentation)**:
- Code-fenced Task examples cause 0% agent delegation due to priming effect
- Multi-template retry strategy improves success rate from 70-80% to 95-98%
- Hierarchical agent architecture achieves 92-97% context reduction through metadata extraction
- Behavioral injection pattern critical for agent delegation (imperative language required)
- Verification-fallback pattern achieves 100% file creation rate

**From Report 490 (/supervise Command Analysis)**:
- /supervise has 95% architectural compliance but lacks wave-based parallel execution (40-60% performance gap)
- Three minor standards violations: behavioral duplication (250 lines), missing imperative markers (2 instances), code-fenced anti-pattern example
- 90-95% functional overlap between /supervise and /orchestrate
- /supervise is cleaner (2,177 lines) vs /orchestrate (5,438 lines) but sequential-only
- Wave-based implementation is the critical missing feature

**Recommended Approach**:
Start from /supervise's proven architecture, add wave-based implementation for Phase 3 only, fix three violations, implement multi-template retry, maintain economical design without /orchestrate's heaviness (PR automation, dashboard, extensive dry-run).

## Success Criteria
- [ ] Command file exists at `.claude/commands/coordinate.md` with 2,500-3,000 lines (not 5,438 like /orchestrate)
- [ ] Zero code-fenced Task invocation examples (prevents 0% delegation rate)
- [ ] All agent invocations use imperative pattern with unwrapped Task blocks
- [ ] Wave-based implementation integrated for Phase 3 using dependency-analyzer.sh
- [ ] Multi-template retry strategy implemented (95-98% success rate)
- [ ] Verification-fallback pattern for 100% file creation rate
- [ ] Context pruning between phases maintains <30% context usage
- [ ] Checkpoint save/resume for interruption recovery
- [ ] All tests passing with >80% coverage of agent invocation patterns
- [ ] Documentation complete with usage examples and migration guide from /supervise

## Technical Design

### Architecture Overview

```
/coordinate Command Structure (2,500-3,000 lines target)

┌─────────────────────────────────────────────────────────────┐
│ Phase 0: Location & Path Pre-Calculation                    │
│ - Unified location detection library (not inline bash)      │
│ - Topic directory structure creation                        │
│ - Artifact path pre-calculation                             │
└─────────────────────────────────────────────────────────────┘
                            ↓
┌─────────────────────────────────────────────────────────────┐
│ Phase 1: Research (2-4 parallel agents)                     │
│ - Complexity scoring (structured, not keyword-based)        │
│ - Task invocation with imperative markers (NO code fences)  │
│ - Metadata extraction (title + 50-word summary)             │
│ - Verification checkpoint (files exist check)               │
└─────────────────────────────────────────────────────────────┘
                            ↓
┌─────────────────────────────────────────────────────────────┐
│ Phase 2: Planning                                           │
│ - Enhanced context injection (THINKING_MODE, reports list)  │
│ - Multi-template retry (standard → ultra-explicit → steps)  │
│ - Verification checkpoint with fallback                     │
└─────────────────────────────────────────────────────────────┘
                            ↓
┌─────────────────────────────────────────────────────────────┐
│ Phase 3: Implementation (WAVE-BASED PARALLEL)               │
│ - Dependency graph analysis (dependency-analyzer.sh)        │
│ - Wave calculation (Kahn's algorithm)                       │
│ - Parallel phase execution within waves                     │
│ - Per-wave checkpointing                                    │
│ - Implementer-coordinator agent delegation                  │
└─────────────────────────────────────────────────────────────┘
                            ↓
┌─────────────────────────────────────────────────────────────┐
│ Phase 4: Testing                                            │
│ - Test-specialist agent invocation                          │
│ - Test results verification                                 │
└─────────────────────────────────────────────────────────────┘
                            ↓
┌─────────────────────────────────────────────────────────────┐
│ Phase 5: Debugging (conditional on Phase 4 failures)        │
│ - Debug-analyst agent with structured findings              │
│ - Fix application and retest                                │
│ - Max 3 iterations                                          │
└─────────────────────────────────────────────────────────────┘
                            ↓
┌─────────────────────────────────────────────────────────────┐
│ Phase 6: Documentation                                      │
│ - Doc-writer agent with implementation summary              │
│ - Summary artifact creation                                 │
└─────────────────────────────────────────────────────────────┘
```

### Core Components

**1. Workflow Orchestration (from /supervise)**
- 7-phase sequential structure (Phase 0-6)
- Workflow scope detection (research-only, research-and-plan, full-implementation, debug-only)
- Path pre-calculation before agent invocations
- Metadata-based context passing (forward message pattern)

**2. Wave-Based Implementation (from /orchestrate via dependency-analyzer.sh)**
- Phase dependency graph construction
- Topological sorting (Kahn's algorithm)
- Wave identification (phases with no remaining dependencies)
- Parallel execution within waves
- Wave-level progress tracking and checkpointing

**3. Agent Invocation Standards (fixes from Report 489/490)**
- Imperative markers within 5 lines of Task blocks ("EXECUTE NOW", "YOU MUST")
- NO code-fenced YAML examples (unwrapped Task invocations only)
- Direct behavioral file references (`.claude/agents/*.md`)
- Explicit completion signals (e.g., `PLAN_CREATED:`, `REPORT_CREATED:`)
- Behavioral content in agent files, not inline (Standard 12 compliance)

**4. Reliability Improvements**
- Multi-template retry: standard → ultra-explicit → step-by-step (95-98% success)
- Verification-fallback pattern: mandatory checkpoints after each file creation
- Context pruning between phases: 80-90% reduction for completed phases
- Checkpoint save/resume: state preservation for interruption recovery

### Library Dependencies

- `.claude/lib/workflow-detection.sh` - Workflow scope detection
- `.claude/lib/unified-location-detection.sh` - Topic directory creation (85% token reduction)
- `.claude/lib/dependency-analyzer.sh` - Wave calculation for Phase 3
- `.claude/lib/checkpoint-utils.sh` - Save/restore workflow state
- `.claude/lib/context-pruning.sh` - Context reduction utilities
- `.claude/lib/unified-logger.sh` - Progress markers and logging
- `.claude/lib/error-handling.sh` - Retry logic and error classification

### Agent Behavioral Files

- `.claude/agents/research-specialist.md` - Research agent
- `.claude/agents/plan-architect.md` - Planning agent
- `.claude/agents/implementer-coordinator.md` - Wave orchestration agent
- `.claude/agents/implementation-executor.md` - Single phase executor
- `.claude/agents/test-specialist.md` - Testing agent
- `.claude/agents/debug-analyst.md` - Debug analysis agent
- `.claude/agents/doc-writer.md` - Documentation agent

## Implementation Phases

### Phase 1: Foundation and Baseline
dependencies: []

**Objective**: Copy /supervise as baseline and establish project structure

**Complexity**: Low

**Tasks**:
- [ ] Copy `/home/benjamin/.config/.claude/commands/supervise.md` to `/home/benjamin/.config/.claude/commands/coordinate.md`
- [ ] Update command metadata (description, allowed-tools, argument-hint)
- [ ] Update command header documentation to reference /coordinate (not /supervise)
- [ ] Create test file `.claude/tests/test_coordinate_basic.sh` for baseline tests
- [ ] Verify command is discoverable via `/coordinate --help` or similar
- [ ] Document baseline metrics: file size (2,177 lines), Phase 3 sequential execution
- [ ] Create tracking document for size budget (target: 2,500-3,000 lines)

**Testing**:
```bash
# Verify command exists and is parseable
grep -q "allowed-tools:" .claude/commands/coordinate.md
wc -l .claude/commands/coordinate.md  # Should be ~2,177 initially
```

**Expected Duration**: 1-2 hours

**Phase 1 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (command file parseable, metadata correct)
- [ ] Git commit created: `feat(491): complete Phase 1 - Foundation and Baseline`
- [ ] Checkpoint saved (initial baseline)
- [ ] Update this plan file with phase completion status

### Phase 2: Standards Compliance Fixes
dependencies: [1]

**Objective**: Fix three violations identified in Report 490

**Complexity**: Medium

**Tasks**:
- [ ] **Violation 1 - Missing Imperative Markers**: Add "EXECUTE NOW" markers within 5 lines preceding Task invocations at:
  - [ ] Lines 1135-1155 (debug-analyst invocation)
  - [ ] Lines 1667-1677 (code-writer Phase 5 invocation)
- [ ] **Violation 2 - Code-Fenced Anti-Pattern**: Remove markdown code fence from YAML example at lines 49-54 (unwrap Task invocation)
- [ ] **Violation 3 - Behavioral Content Duplication**: Extract ~250 lines of inline behavioral content to agent files:
  - [ ] Extract debug-analyst STEP 1-4 sequence to `.claude/agents/debug-analyst.md` (verify file exists first)
  - [ ] Extract code-writer STEP 1-4 sequence to `.claude/agents/code-writer.md` (verify file exists first)
  - [ ] Update Task invocations to reference behavioral files only (remove inline content)
  - [ ] Reduce invocation prompts by 90% (250 lines → 25 lines per invocation)
- [ ] Audit entire file for additional code-fenced Task examples (search for ` ```yaml\nTask {`)
- [ ] Verify all Task invocations have imperative markers within 5 lines
- [ ] Document size reduction: expect 200-225 line reduction from behavioral extraction

**Testing**:
```bash
# Test 1: No code-fenced Task examples
! grep -Pzo '```yaml\s*Task\s*\{' .claude/commands/coordinate.md

# Test 2: All Task invocations have imperative markers
# (Manual review - check all Task { blocks have EXECUTE NOW nearby)

# Test 3: Behavioral content extracted
grep -c "Read and follow ALL behavioral guidelines from:" .claude/commands/coordinate.md  # Should be 7
```

**Expected Duration**: 3-4 hours

**Phase 2 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (no code fences, imperative markers present, behavioral extraction complete)
- [ ] Git commit created: `feat(491): complete Phase 2 - Standards Compliance Fixes`
- [ ] Checkpoint saved (standards-compliant baseline)
- [ ] Update this plan file with phase completion status

### Phase 3: Wave-Based Implementation Integration
dependencies: [2]

**Objective**: Add wave-based parallel execution to Phase 3 implementation

**Complexity**: High

**Tasks**:
- [ ] **Library Integration**: Source dependency-analyzer.sh in shared utilities section
- [ ] **Phase 3 Restructure**: Replace single code-writer agent invocation with wave-based orchestration:
  - [ ] Add dependency graph parsing call to dependency-analyzer.sh
  - [ ] Add wave calculation logic (Kahn's algorithm via library)
  - [ ] Create wave execution loop (for each wave, invoke phases in parallel)
  - [ ] Update checkpoint schema to track wave boundaries (current_wave, completed_waves[])
  - [ ] Add wave-level progress markers ("Wave N: 3 phases executing in parallel")
- [ ] **Agent Delegation**: Update Phase 3 to use implementer-coordinator agent (not code-writer):
  - [ ] Replace code-writer invocation with implementer-coordinator
  - [ ] Inject wave context (phase IDs, dependency graph, wave number)
  - [ ] Implementer-coordinator will invoke implementation-executor agents per phase
- [ ] **Parallel Execution Pattern**: Implement parallel Task invocations within waves
  - [ ] Use background execution pattern (Task tool in parallel)
  - [ ] Collect results from all wave phases before proceeding to next wave
  - [ ] Handle partial wave failures (if ≥50% succeed, continue)
- [ ] **Wave Checkpointing**: Save checkpoint after each wave completes (not just phases)
- [ ] Document wave-based pattern in command header (reference parallel-execution.md)
- [ ] Add performance metrics tracking (wave parallelization time savings)

**Testing**:
```bash
# Test 1: Dependency analyzer library sourced
grep -q "source.*dependency-analyzer.sh" .claude/commands/coordinate.md

# Test 2: Wave calculation logic present
grep -q "calculate_waves\|build_dependency_graph" .claude/commands/coordinate.md

# Test 3: Implementer-coordinator agent invoked (not code-writer)
grep -q "implementer-coordinator.md" .claude/commands/coordinate.md
! grep "code-writer.md.*Phase 3" .claude/commands/coordinate.md
```

**Expected Duration**: 8-12 hours

**Phase 3 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (wave calculation present, implementer-coordinator invoked, checkpoint schema updated)
- [ ] Git commit created: `feat(491): complete Phase 3 - Wave-Based Implementation Integration`
- [ ] Checkpoint saved (wave execution capability)
- [ ] Update this plan file with phase completion status

### Phase 4: Multi-Template Retry Strategy
dependencies: [3]

**Objective**: Implement three-level template escalation for agent reliability

**Complexity**: Medium

**Tasks**:
- [ ] **Template Repository**: Create template structure for escalating agent prompts:
  - [ ] Define standard template (normal enforcement language)
  - [ ] Define ultra-explicit template (enhanced imperative markers, bold enforcement)
  - [ ] Define step-by-step template (numbered steps, maximum enforcement, completion checklists)
- [ ] **Retry Logic Integration**: Add retry wrapper for all agent invocations:
  - [ ] Attempt 1: Standard template
  - [ ] Attempt 2 (if verification fails): Ultra-explicit template with stronger markers
  - [ ] Attempt 3 (if verification fails): Step-by-step template with completion checklist
  - [ ] Max 3 attempts total, escalate to user if all fail
- [ ] **Template Application**: Apply multi-template retry to all 7 agents:
  - [ ] Research-specialist (Phase 1)
  - [ ] Plan-architect (Phase 2)
  - [ ] Implementer-coordinator (Phase 3)
  - [ ] Test-specialist (Phase 4)
  - [ ] Debug-analyst (Phase 5)
  - [ ] Doc-writer (Phase 6)
- [ ] **Verification Checkpoints**: After each agent invocation, verify expected output:
  - [ ] File creation verification (file exists check)
  - [ ] Content verification (file size >0, required sections present)
  - [ ] If verification fails, retry with next template level
- [ ] Document retry strategy in command header (expected 95-98% success rate)
- [ ] Add retry metrics tracking to workflow state

**Testing**:
```bash
# Test 1: Template definitions present
grep -c "TEMPLATE_LEVEL.*standard\|ultra-explicit\|step-by-step" .claude/commands/coordinate.md  # Should be 3+

# Test 2: Retry logic present
grep -q "retry.*template\|escalate.*template" .claude/commands/coordinate.md

# Test 3: Verification checkpoints present for all agents
grep -c "Verification checkpoint" .claude/commands/coordinate.md  # Should be ≥7
```

**Expected Duration**: 6-8 hours

**Phase 4 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (templates defined, retry logic present, verification checkpoints for all agents)
- [ ] Git commit created: `feat(491): complete Phase 4 - Multi-Template Retry Strategy`
- [ ] Checkpoint saved (reliability enhancements)
- [ ] Update this plan file with phase completion status

### Phase 5: Context Reduction and Optimization
dependencies: [4]

**Objective**: Integrate context pruning and optimize for economy

**Complexity**: Medium

**Tasks**:
- [ ] **Context Pruning Integration**: Add context-pruning.sh utilities after each phase:
  - [ ] After Phase 1: Prune research agent full outputs (keep metadata only)
  - [ ] After Phase 2: Prune plan content (keep path + summary only)
  - [ ] After Phase 3: Aggressive pruning of completed wave metadata
  - [ ] After Phase 4: Prune test output (keep pass/fail status only)
  - [ ] Target: 80-90% context reduction for completed phases
- [ ] **Size Optimization**: Review file size and reduce non-critical verbosity:
  - [ ] Current baseline: ~2,177 lines (from /supervise) + Phase 3 additions (~200 lines) + retry logic (~150 lines) = ~2,527 lines
  - [ ] Target: 2,500-3,000 lines (stay within budget)
  - [ ] Identify opportunities for library extraction (if approaching 3,000 line limit)
  - [ ] Consider extracting retry templates to shared file if needed
- [ ] **Metadata Extraction**: Ensure forward message pattern for all agents:
  - [ ] Extract title + 50-word summary from research reports
  - [ ] Extract complexity + phase count from plans
  - [ ] Extract pass/fail + error count from test results
  - [ ] Do NOT pass full content between phases
- [ ] **Progress Streaming**: Add progress markers at phase boundaries (silent PROGRESS: markers)
- [ ] Document context reduction achievements (target: <30% context usage)

**Testing**:
```bash
# Test 1: Context pruning library sourced
grep -q "source.*context-pruning.sh" .claude/commands/coordinate.md

# Test 2: Metadata extraction for all agents
grep -c "extract.*metadata\|forward message" .claude/commands/coordinate.md  # Should be ≥7

# Test 3: File size within budget
LINE_COUNT=$(wc -l < .claude/commands/coordinate.md)
[ "$LINE_COUNT" -ge 2500 ] && [ "$LINE_COUNT" -le 3000 ]
```

**Expected Duration**: 4-6 hours

**Phase 5 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (context pruning integrated, metadata extraction for all agents, file size within budget)
- [ ] Git commit created: `feat(491): complete Phase 5 - Context Reduction and Optimization`
- [ ] Checkpoint saved (optimized implementation)
- [ ] Update this plan file with phase completion status

### Phase 6: Integration Testing and Validation
dependencies: [5]

**Objective**: Comprehensive testing of all command features

**Complexity**: High

**Tasks**:
- [ ] **Agent Delegation Tests**: Create `.claude/tests/test_coordinate_delegation.sh`
  - [ ] Test Phase 1: Research agent invocations (expect 2-4 agents)
  - [ ] Test Phase 2: Plan architect invocation (expect plan file creation)
  - [ ] Test Phase 3: Wave-based implementation (expect implementer-coordinator invocation)
  - [ ] Test Phase 4: Test specialist invocation (expect test results)
  - [ ] Test Phase 5: Debug analyst invocation (conditional on failures)
  - [ ] Test Phase 6: Doc writer invocation (expect summary file)
  - [ ] Verify 100% delegation rate (all agents invoked as expected)
- [ ] **Wave Execution Tests**: Create `.claude/tests/test_coordinate_waves.sh`
  - [ ] Test with plan containing phase dependencies
  - [ ] Verify wave calculation (phases grouped by dependency level)
  - [ ] Verify parallel execution (multiple phases in same wave)
  - [ ] Verify wave checkpoint save/restore
- [ ] **Standards Compliance Tests**: Create `.claude/tests/test_coordinate_standards.sh`
  - [ ] Test: No code-fenced Task examples
  - [ ] Test: All Task invocations have imperative markers
  - [ ] Test: Behavioral content extracted (not inline)
  - [ ] Test: Verification checkpoints present
- [ ] **End-to-End Workflow Tests**: Test complete workflows
  - [ ] Test workflow: research-only (Phases 0-1)
  - [ ] Test workflow: research-and-plan (Phases 0-2)
  - [ ] Test workflow: full-implementation (Phases 0-6)
  - [ ] Test workflow: debug-only (Phases 0, 1, 5)
- [ ] **Reliability Tests**: Test multi-template retry and verification-fallback
  - [ ] Simulate agent failure (expect retry with next template)
  - [ ] Simulate file creation failure (expect verification retry)
  - [ ] Verify 95-98% success rate with retry strategy
- [ ] **Performance Benchmarks**: Measure context usage and time savings
  - [ ] Context usage at each phase boundary (target: <30%)
  - [ ] Wave-based time savings vs sequential (expect 40-60%)
  - [ ] Retry overhead (expect <5%)

**Testing**:
```bash
# Run all test suites
bash .claude/tests/test_coordinate_delegation.sh
bash .claude/tests/test_coordinate_waves.sh
bash .claude/tests/test_coordinate_standards.sh

# Coverage check
TOTAL_TESTS=$(grep -r "test_" .claude/tests/test_coordinate_*.sh | wc -l)
echo "Total tests: $TOTAL_TESTS (target: ≥20)"
```

**Expected Duration**: 10-12 hours

**Phase 6 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (≥20 tests covering delegation, waves, standards, workflows, reliability)
- [ ] Git commit created: `feat(491): complete Phase 6 - Integration Testing and Validation`
- [ ] Checkpoint saved (fully tested implementation)
- [ ] Update this plan file with phase completion status

### Phase 7: Documentation and Migration Guide
dependencies: [6]

**Objective**: Complete documentation and provide migration path from /supervise

**Complexity**: Low

**Tasks**:
- [ ] **Command Documentation**: Update `.claude/commands/coordinate.md` header
  - [ ] Usage examples (all 4 workflow types)
  - [ ] Wave-based execution explanation with diagrams
  - [ ] Multi-template retry behavior documentation
  - [ ] Performance targets and metrics
  - [ ] Library dependencies reference
  - [ ] Agent behavioral files reference
- [ ] **Migration Guide**: Create `.claude/docs/migrations/supervise-to-coordinate.md`
  - [ ] Feature comparison table (supervise vs coordinate)
  - [ ] Syntax differences (if any)
  - [ ] Performance improvements (wave-based execution, retry strategy)
  - [ ] Migration timeline recommendation
  - [ ] Common migration issues and solutions
- [ ] **Update CLAUDE.md**: Add /coordinate to project commands section
  - [ ] Replace /supervise reference with /coordinate (or mark /supervise deprecated)
  - [ ] Document wave-based execution capability
  - [ ] Update workflow orchestration examples
- [ ] **Create Usage Examples**: Add example workflows to documentation
  - [ ] Example 1: Research-only workflow
  - [ ] Example 2: Research-and-plan workflow (most common)
  - [ ] Example 3: Full-implementation workflow with wave execution
  - [ ] Example 4: Debug-only workflow
- [ ] **Performance Documentation**: Document benchmarks and improvements
  - [ ] Context reduction: <30% usage (from metadata extraction + pruning)
  - [ ] Time savings: 40-60% (from wave-based parallel execution)
  - [ ] Success rate: 95-98% (from multi-template retry)
  - [ ] File creation rate: 100% (from verification-fallback pattern)
- [ ] **Update Command Reference**: Update `.claude/docs/reference/command-reference.md`
  - [ ] Add /coordinate entry with full syntax and capabilities
  - [ ] Mark /supervise as deprecated (if applicable)

**Testing**:
```bash
# Verify documentation completeness
grep -q "/coordinate" .claude/docs/reference/command-reference.md
grep -q "supervise-to-coordinate.md" .claude/docs/migrations/
grep -q "/coordinate" /home/benjamin/.config/CLAUDE.md

# Verify examples present
grep -c "Example [0-9]:" .claude/docs/migrations/supervise-to-coordinate.md  # Should be ≥4
```

**Expected Duration**: 4-6 hours

**Phase 7 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (documentation complete, migration guide exists, CLAUDE.md updated)
- [ ] Git commit created: `feat(491): complete Phase 7 - Documentation and Migration Guide`
- [ ] Checkpoint saved (implementation complete)
- [ ] Update this plan file with phase completion status

## Testing Strategy

### Test Categories

**1. Agent Delegation Tests** (Priority: CRITICAL)
- Verify 100% delegation rate (all intended agents invoked)
- Test imperative markers prevent priming effect
- Validate behavioral injection pattern
- Test multi-template retry escalation

**2. Wave Execution Tests** (Priority: HIGH)
- Dependency graph construction accuracy
- Wave calculation correctness (Kahn's algorithm)
- Parallel execution within waves
- Wave-level checkpoint save/restore

**3. Standards Compliance Tests** (Priority: HIGH)
- Zero code-fenced Task examples (prevents 0% delegation)
- Imperative markers within 5 lines of Task blocks
- Behavioral content in agent files (not inline)
- Verification checkpoints after file creation

**4. Workflow Tests** (Priority: MEDIUM)
- Research-only workflow (Phases 0-1)
- Research-and-plan workflow (Phases 0-2)
- Full-implementation workflow (Phases 0-6)
- Debug-only workflow (Phases 0, 1, 5)

**5. Reliability Tests** (Priority: MEDIUM)
- Multi-template retry success rate (95-98%)
- Verification-fallback pattern (100% file creation)
- Partial failure handling (research phase ≥50% success)
- Checkpoint recovery from interruption

**6. Performance Tests** (Priority: LOW)
- Context usage at phase boundaries (<30%)
- Wave-based time savings (40-60%)
- Retry overhead (<5%)
- File size within budget (2,500-3,000 lines)

### Test Execution

```bash
# Run all coordinate tests
bash .claude/tests/test_coordinate_basic.sh
bash .claude/tests/test_coordinate_delegation.sh
bash .claude/tests/test_coordinate_waves.sh
bash .claude/tests/test_coordinate_standards.sh

# Integration test (run actual workflow)
/coordinate "Research authentication patterns to create plan" --dry-run

# Performance benchmark
time /coordinate "Implement feature X" --parallel
```

### Coverage Requirements

- **Agent Invocation Coverage**: 100% (all 7 agents tested)
- **Wave Execution Coverage**: 100% (all dependency patterns tested)
- **Standards Coverage**: 100% (all 3 violations prevented)
- **Workflow Coverage**: 100% (all 4 workflow types tested)
- **Overall Test Coverage**: ≥80% (20+ tests across all categories)

## Documentation Requirements

### Command Documentation
- Update `.claude/commands/coordinate.md` header with comprehensive usage guide
- Include wave-based execution explanation with ASCII diagrams
- Document multi-template retry strategy and expected success rates
- Reference all library dependencies and agent behavioral files

### Migration Documentation
- Create `.claude/docs/migrations/supervise-to-coordinate.md` with feature comparison
- Provide syntax examples for common workflows
- Document performance improvements and migration benefits
- Include troubleshooting section for common issues

### Project Configuration Updates
- Update `/home/benjamin/.config/CLAUDE.md` to reference /coordinate
- Mark /supervise as deprecated (or remove reference)
- Update workflow orchestration examples to use /coordinate
- Add wave-based execution to quick reference

### Reference Documentation Updates
- Add /coordinate to `.claude/docs/reference/command-reference.md`
- Update agent reference to note /coordinate usage
- Document wave execution pattern in parallel-execution.md
- Update hierarchical-agents.md with /coordinate examples

## Dependencies

### Library Dependencies (All Must Exist)
- `.claude/lib/workflow-detection.sh` - Workflow scope detection (fallback available)
- `.claude/lib/unified-location-detection.sh` - Topic directory creation (REQUIRED)
- `.claude/lib/dependency-analyzer.sh` - Wave calculation (REQUIRED for Phase 3)
- `.claude/lib/checkpoint-utils.sh` - Save/restore state (REQUIRED)
- `.claude/lib/context-pruning.sh` - Context reduction (REQUIRED)
- `.claude/lib/unified-logger.sh` - Progress markers (REQUIRED)
- `.claude/lib/error-handling.sh` - Retry logic (REQUIRED)

### Agent Dependencies (All Must Exist)
- `.claude/agents/research-specialist.md` - Research agent
- `.claude/agents/plan-architect.md` - Planning agent
- `.claude/agents/implementer-coordinator.md` - Wave orchestration agent
- `.claude/agents/implementation-executor.md` - Single phase executor
- `.claude/agents/test-specialist.md` - Testing agent
- `.claude/agents/debug-analyst.md` - Debug analysis agent
- `.claude/agents/doc-writer.md` - Documentation agent

### External Standards
- Command Architecture Standards (Standard 11, 12) - Must be followed
- Behavioral Injection Pattern - Must be implemented
- Verification-Fallback Pattern - Must be implemented
- Metadata Extraction Pattern - Must be implemented
- Forward Message Pattern - Must be implemented

### Prerequisite Commands
- `/supervise` - Must exist as baseline to copy from
- `/orchestrate` - Must exist as reference for wave-based implementation

## Risk Mitigation

### Risk 1: File Size Budget Exceeded
**Risk**: Adding wave execution + retry logic exceeds 3,000 line target
**Mitigation**:
- Extract retry templates to shared file if needed
- Use library references instead of inline bash where possible
- Monitor size after each phase, adjust if approaching limit

### Risk 2: Wave Execution Complexity
**Risk**: Integrating dependency-analyzer.sh more complex than expected
**Mitigation**:
- Start with simple test plans (2-3 phases, clear dependencies)
- Reference /orchestrate's proven implementation
- Test wave calculation independently before integration

### Risk 3: Agent Delegation Failures
**Risk**: Despite fixes, agents still not invoked correctly
**Mitigation**:
- Implement delegation rate testing from day one
- Use multi-template retry as safety net
- Add diagnostic logging to detect priming effect

### Risk 4: Test Coverage Gaps
**Risk**: Integration tests miss critical failure modes
**Mitigation**:
- Test each phase incrementally during development
- Create failure injection tests (simulate agent errors)
- Validate against known /supervise violations

### Risk 5: Migration Confusion
**Risk**: Users unclear when to use /coordinate vs /supervise
**Mitigation**:
- Create clear migration guide with decision framework
- Document performance benefits quantitatively
- Provide side-by-side comparison examples

## Implementation Notes

### Phase Dependencies
All phases use sequential dependencies ([1], [2], [3], etc.) because this is architectural work where each phase builds on the previous. Wave-based execution is for the command's Phase 3 implementation orchestration, not the plan itself.

### Size Budget Tracking
- Baseline: 2,177 lines (from /supervise)
- Phase 2 reduction: -200 lines (behavioral extraction)
- Phase 3 addition: +200 lines (wave execution)
- Phase 4 addition: +150 lines (retry logic)
- Phase 5 optimization: -50 lines (pruning references)
- **Estimated Final**: 2,277 lines (well within 2,500-3,000 target)

### Key Differences from /orchestrate
**NOT Including** (keeps file economical):
- PR creation automation (too heavy, 200+ lines)
- Dashboard progress tracking (too complex, 150+ lines)
- Extensive dry-run mode (keep simple 50-line version)
- Multiple specialized utility functions (use libraries instead)

**Including from /orchestrate**:
- Wave-based implementation (core feature, 200 lines)
- Multi-template retry (proven pattern, 150 lines)
- Checkpoint save/resume (essential, already in /supervise)

### Critical Success Factors
1. Zero code-fenced Task examples (prevents 0% delegation)
2. Wave execution for 40-60% time savings
3. Multi-template retry for 95-98% success rate
4. File size within 2,500-3,000 lines (not 5,438)
5. All standards violations fixed (100% compliance)
