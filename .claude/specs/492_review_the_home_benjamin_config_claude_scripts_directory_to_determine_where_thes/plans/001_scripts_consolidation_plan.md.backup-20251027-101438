# Scripts Directory Consolidation Implementation Plan

## Metadata
- **Date**: 2025-10-27
- **Feature**: Scripts directory consolidation and cleanup
- **Scope**: Archive obsolete scripts, consolidate context metrics functionality into lib/, update documentation
- **Estimated Phases**: 5
- **Estimated Hours**: 4-6 hours
- **Structure Level**: 0
- **Complexity Score**: 45.5
- **Standards File**: /home/benjamin/.config/CLAUDE.md
- **Research Reports**:
  - [Scripts Inventory and Dependencies](../reports/001_scripts_inventory_and_dependencies.md)
  - [Scripts Usage Patterns](../reports/002_scripts_usage_patterns.md)
  - [Consolidation Opportunities](../reports/003_consolidation_opportunities.md)

## Overview

The `.claude/scripts/` directory contains 5 operational scripts totaling 1,568 LOC. Research indicates that 3 of these scripts are historical artifacts from completed migrations (specs 056, 074, 079), 1 script has overlapping functionality with lib/context-metrics.sh, and 1 script should be retained as a validation tool. This plan consolidates the directory structure by archiving completed work, eliminating duplication, and improving discoverability of active utilities.

**Goals**:
1. Archive 3 historical scripts (migrate_to_topic_structure.sh, validate_migration.sh, validate-readme-counts.sh)
2. Consolidate context metrics reporting functionality into lib/context-metrics.sh
3. Retain validate_context_reduction.sh as active validation tool
4. Update all documentation references
5. Validate that no workflows are broken by changes

## Research Summary

Key findings from research reports:

**From Scripts Inventory Report**:
- 5 operational scripts identified with minimal dependencies
- Only migrate_to_topic_structure.sh sources a library (lib/template-integration.sh)
- No problematic duplication between scripts found
- Scripts are standalone executables with CLI interfaces

**From Usage Patterns Report**:
- Zero active integration: No scripts referenced in commands/, agents/, or lib/
- All references are documentation-only (example usage, available tools)
- 4 of 5 scripts are legacy from completed migrations (Oct 18-21, 2025)
- Only validate-readme-counts.sh shows recent activity

**From Consolidation Opportunities Report**:
- context_metrics_dashboard.sh duplicates calculate_context_reduction() from lib/context-metrics.sh (100% overlap)
- Migration scripts (migrate_to_topic_structure.sh, validate_migration.sh) are historical artifacts from completed spec 056
- validate-readme-counts.sh is project-specific with hardcoded paths, created for completed plan 074
- validate_context_reduction.sh is complex (525 LOC) with CLI interface, should be retained

**Recommended Approach**: Archive historical scripts to `.claude/archive/scripts/`, consolidate context metrics into lib/, retain validation tool, update documentation.

## Success Criteria
- [ ] Historical migration scripts archived to `.claude/archive/scripts/migration-2025-10/`
- [ ] Project-specific validation script archived to `.claude/archive/scripts/validation-2025-10/`
- [ ] Context metrics dashboard functionality consolidated into lib/context-metrics.sh
- [ ] scripts/context_metrics_dashboard.sh converted to thin wrapper
- [ ] All documentation references updated (README.md, CLAUDE.md, related docs)
- [ ] No broken workflows or references after consolidation
- [ ] Archive directories have explanatory README.md files
- [ ] Git commits follow project standards (atomic, tested)

## Technical Design

### Archive Structure
```
.claude/
├── archive/
│   └── scripts/
│       ├── migration-2025-10/
│       │   ├── README.md (explains archive purpose, restoration)
│       │   ├── migrate_to_topic_structure.sh
│       │   └── validate_migration.sh
│       └── validation-2025-10/
│           ├── README.md (explains archive purpose)
│           └── validate-readme-counts.sh
├── scripts/
│   ├── README.md (updated, removes archived scripts)
│   ├── context_metrics_dashboard.sh (thin wrapper)
│   └── validate_context_reduction.sh (retained)
└── lib/
    └── context-metrics.sh (expanded with dashboard functions)
```

### Context Metrics Consolidation Design

**Functions to Move from scripts/context_metrics_dashboard.sh to lib/context-metrics.sh**:
1. `parse_context_logs()` - Parse context-metrics.log for entries
2. `aggregate_metrics()` - Calculate statistics (avg, min, max reduction)
3. `generate_dashboard_report()` - Generate text or JSON dashboard
4. `format_dashboard_output()` - Format output with colors/structure

**Wrapper Script Pattern**:
```bash
#!/usr/bin/env bash
# Thin wrapper for context metrics dashboard functionality
source "${BASH_SOURCE%/*}/../lib/context-metrics.sh"
generate_dashboard_report "$@"
```

### Documentation Updates Required
1. `.claude/scripts/README.md` - Remove archived scripts, update inventory
2. `CLAUDE.md` - No changes needed (scripts not referenced)
3. `.claude/lib/README.md` - Document new dashboard functions in context-metrics.sh
4. Archive README.md files - Explain purpose, restoration instructions

## Implementation Phases

### Phase 1: Create Archive Structure and READMEs
dependencies: []

**Objective**: Establish archive directories with explanatory documentation

**Complexity**: Low

**Tasks**:
- [ ] Create directory structure: `.claude/archive/scripts/migration-2025-10/`
- [ ] Create directory structure: `.claude/archive/scripts/validation-2025-10/`
- [ ] Create `.claude/archive/scripts/migration-2025-10/README.md` explaining:
  - Purpose: Historical reference for completed spec 056 migration
  - Scripts archived: migrate_to_topic_structure.sh, validate_migration.sh
  - Completion date: October 18, 2025
  - Restoration instructions: `git mv` back to scripts/ if needed
- [ ] Create `.claude/archive/scripts/validation-2025-10/README.md` explaining:
  - Purpose: Historical reference for completed plan 074 validation
  - Script archived: validate-readme-counts.sh
  - Completion date: October 21, 2025
  - Restoration instructions: `git mv` back to scripts/ if needed

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

**Testing**:
```bash
# Verify directory structure created
test -d .claude/archive/scripts/migration-2025-10 && echo "✓ Migration archive exists"
test -d .claude/archive/scripts/validation-2025-10 && echo "✓ Validation archive exists"

# Verify README files exist
test -f .claude/archive/scripts/migration-2025-10/README.md && echo "✓ Migration README exists"
test -f .claude/archive/scripts/validation-2025-10/README.md && echo "✓ Validation README exists"
```

**Expected Duration**: 30 minutes

**Phase 1 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(492): complete Phase 1 - Create Archive Structure and READMEs`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 2: Archive Historical Scripts
dependencies: [1]

**Objective**: Move completed migration and validation scripts to archive

**Complexity**: Low

**Tasks**:
- [ ] Use `git mv` to move `scripts/migrate_to_topic_structure.sh` to `archive/scripts/migration-2025-10/`
- [ ] Use `git mv` to move `scripts/validate_migration.sh` to `archive/scripts/migration-2025-10/`
- [ ] Use `git mv` to move `scripts/validate-readme-counts.sh` to `archive/scripts/validation-2025-10/`
- [ ] Verify no broken symlinks or references in scripts/ directory
- [ ] Search codebase for any hardcoded references to archived scripts using Grep tool:
  - Pattern: `scripts/(migrate_to_topic_structure|validate_migration|validate-readme-counts)\.sh`
  - Update any found references to point to archive/ location

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

**Testing**:
```bash
# Verify scripts moved to archive
test -f .claude/archive/scripts/migration-2025-10/migrate_to_topic_structure.sh && echo "✓ migrate_to_topic_structure.sh archived"
test -f .claude/archive/scripts/migration-2025-10/validate_migration.sh && echo "✓ validate_migration.sh archived"
test -f .claude/archive/scripts/validation-2025-10/validate-readme-counts.sh && echo "✓ validate-readme-counts.sh archived"

# Verify scripts no longer in scripts/
test ! -f .claude/scripts/migrate_to_topic_structure.sh && echo "✓ migrate_to_topic_structure.sh removed from scripts/"
test ! -f .claude/scripts/validate_migration.sh && echo "✓ validate_migration.sh removed from scripts/"
test ! -f .claude/scripts/validate-readme-counts.sh && echo "✓ validate-readme-counts.sh removed from scripts/"

# Verify archived scripts are executable
test -x .claude/archive/scripts/migration-2025-10/migrate_to_topic_structure.sh && echo "✓ migrate_to_topic_structure.sh executable"
test -x .claude/archive/scripts/migration-2025-10/validate_migration.sh && echo "✓ validate_migration.sh executable"
test -x .claude/archive/scripts/validation-2025-10/validate-readme-counts.sh && echo "✓ validate-readme-counts.sh executable"
```

**Expected Duration**: 30 minutes

**Phase 2 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(492): complete Phase 2 - Archive Historical Scripts`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 3: Consolidate Context Metrics Functionality
dependencies: [2]

**Objective**: Move dashboard functions from scripts/ to lib/, create thin wrapper

**Complexity**: Medium

**Tasks**:
- [ ] Read `scripts/context_metrics_dashboard.sh` to identify functions to extract:
  - `check_log_file()` (lines ~30-40)
  - `parse_metrics()` (lines ~113-145)
  - `calculate_statistics()` (lines ~147-167)
  - `output_text()` (lines ~169-250)
  - `output_json()` (lines ~252-350)
- [ ] Read `lib/context-metrics.sh` to understand existing structure and determine insertion point
- [ ] Add extracted functions to `lib/context-metrics.sh`:
  - Rename `calculate_statistics()` to `calculate_aggregate_statistics()` to avoid naming conflicts
  - Rename `output_text()` to `format_text_dashboard()` for clarity
  - Rename `output_json()` to `format_json_dashboard()` for clarity
  - Add `generate_dashboard_report()` as main entry point (orchestrates parse → calculate → format)
- [ ] Update `lib/context-metrics.sh` function documentation header:
  - Add "Dashboard Reporting Functions" section
  - Document new functions with parameters, return values, usage examples
- [ ] Replace `scripts/context_metrics_dashboard.sh` content with thin wrapper:
  - Source `../lib/context-metrics.sh`
  - Parse CLI arguments ($1, $2, etc.)
  - Call `generate_dashboard_report()` with parsed arguments
  - Exit with return code from generate_dashboard_report
- [ ] Test wrapper script with various arguments:
  - `./context_metrics_dashboard.sh` (default behavior)
  - `./context_metrics_dashboard.sh --format text`
  - `./context_metrics_dashboard.sh --format json`
  - `./context_metrics_dashboard.sh --log-file custom.log`

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

**Testing**:
```bash
# Test wrapper script functionality
cd .claude/scripts
./context_metrics_dashboard.sh --format text > /tmp/dashboard_text.txt
test -s /tmp/dashboard_text.txt && echo "✓ Text dashboard generated"

./context_metrics_dashboard.sh --format json > /tmp/dashboard_json.txt
test -s /tmp/dashboard_json.txt && echo "✓ JSON dashboard generated"

# Test lib function directly
cd .claude/lib
source context-metrics.sh
generate_dashboard_report --format text > /tmp/lib_dashboard.txt
test -s /tmp/lib_dashboard.txt && echo "✓ Library function works"

# Verify wrapper delegates to lib
diff /tmp/dashboard_text.txt /tmp/lib_dashboard.txt && echo "✓ Wrapper delegates correctly"
```

**Expected Duration**: 2-3 hours

**Phase 3 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(492): complete Phase 3 - Consolidate Context Metrics Functionality`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 4: Update Documentation
dependencies: [2, 3]

**Objective**: Update all documentation to reflect archive and consolidation changes

**Complexity**: Low

**Tasks**:
- [ ] Update `.claude/scripts/README.md`:
  - Remove documentation for archived scripts (migrate_to_topic_structure.sh, validate_migration.sh, validate-readme-counts.sh)
  - Update "Scripts Overview" section to show 2 active scripts (context_metrics_dashboard.sh, validate_context_reduction.sh)
  - Add "Archived Scripts" section with links to archive directories
  - Update file count in header (5 scripts → 2 scripts)
- [ ] Update `.claude/lib/README.md`:
  - Add context-metrics.sh dashboard functions to "Module Documentation" section:
    - `generate_dashboard_report()` - Generate context metrics dashboard (text or JSON)
    - `calculate_aggregate_statistics()` - Calculate min/max/avg reduction percentages
    - `format_text_dashboard()` - Format dashboard as text output
    - `format_json_dashboard()` - Format dashboard as JSON output
  - Update context-metrics.sh module description to mention dashboard capabilities
- [ ] Search for documentation references to archived scripts:
  - Use Grep tool with pattern: `migrate_to_topic_structure|validate_migration|validate-readme-counts`
  - Check directories: docs/, specs/, CLAUDE.md
  - Update or add notes indicating scripts are archived (if references found)
- [ ] Verify no broken links in README.md files using Bash:
  - `cd .claude && grep -r "\[.*\](.*\.sh)" README.md */README.md | grep -v "^Binary"`
  - Check that all script links point to valid files

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

**Testing**:
```bash
# Verify README.md updates
grep -c "migrate_to_topic_structure" .claude/scripts/README.md
test $? -ne 0 && echo "✓ Migration script removed from scripts/README.md"

grep -q "archive/scripts/" .claude/scripts/README.md && echo "✓ Archive reference added to scripts/README.md"

# Verify lib/README.md updates
grep -q "generate_dashboard_report" .claude/lib/README.md && echo "✓ Dashboard function documented in lib/README.md"

# Check for broken documentation links
! grep -r "\[.*\](scripts/migrate_to_topic_structure\.sh)" .claude/docs/ && echo "✓ No broken links to archived scripts"
```

**Expected Duration**: 1 hour

**Phase 4 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(492): complete Phase 4 - Update Documentation`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

### Phase 5: Validation and Integration Testing
dependencies: [4]

**Objective**: Verify all changes work correctly and no workflows are broken

**Complexity**: Low

**Tasks**:
- [ ] Run comprehensive validation checks:
  - Verify 2 active scripts remain in scripts/ directory
  - Verify 3 archived scripts in archive/scripts/ directories
  - Verify context_metrics_dashboard.sh wrapper functions correctly
  - Verify validate_context_reduction.sh still sources lib/context-metrics.sh successfully
- [ ] Test context metrics end-to-end workflow:
  - Generate sample context-metrics.log entry (if log exists)
  - Run `scripts/context_metrics_dashboard.sh --format text`
  - Verify output shows expected metrics (reduction percentages, command stats)
- [ ] Test validate_context_reduction.sh with updated lib:
  - Run `scripts/validate_context_reduction.sh --verbose`
  - Verify it sources lib/context-metrics.sh without errors
  - Check validation output includes context metrics tests
- [ ] Search codebase for any remaining references to archived scripts:
  - Use Grep with pattern: `scripts/(migrate_to_topic_structure|validate_migration|validate-readme-counts)`
  - Verify all matches are either in archive/ or documentation explaining archive
- [ ] Verify git status shows clean working tree after commits
- [ ] Review all commits for proper format: `feat(492): complete Phase N - Description`

<!-- PROGRESS CHECKPOINT -->
After completing the above tasks:
- [ ] Update this plan file: Mark completed tasks with [x]
- [ ] Verify changes with git diff
<!-- END PROGRESS CHECKPOINT -->

**Testing**:
```bash
# Test active scripts count
ACTIVE_SCRIPTS=$(find .claude/scripts -maxdepth 1 -name "*.sh" -type f | wc -l)
test "$ACTIVE_SCRIPTS" -eq 2 && echo "✓ Exactly 2 active scripts remain"

# Test archived scripts count
ARCHIVED_SCRIPTS=$(find .claude/archive/scripts -name "*.sh" -type f | wc -l)
test "$ARCHIVED_SCRIPTS" -eq 3 && echo "✓ Exactly 3 scripts archived"

# Test context_metrics_dashboard.sh wrapper
.claude/scripts/context_metrics_dashboard.sh --format text > /dev/null 2>&1
test $? -eq 0 && echo "✓ context_metrics_dashboard.sh wrapper works"

# Test validate_context_reduction.sh
.claude/scripts/validate_context_reduction.sh --help > /dev/null 2>&1
test $? -eq 0 && echo "✓ validate_context_reduction.sh works"

# Verify no broken references
! grep -r "scripts/migrate_to_topic_structure\.sh" .claude/commands/ .claude/agents/ .claude/lib/ && echo "✓ No broken script references in code"

# Verify git status
git status --porcelain | grep -q "^[^?]" && echo "Changes staged or committed" || echo "⚠ Uncommitted changes remain"
```

**Expected Duration**: 1 hour

**Phase 5 Completion Requirements**:
- [ ] All phase tasks marked [x]
- [ ] Tests passing (run test suite per Testing Protocols in CLAUDE.md)
- [ ] Git commit created: `feat(492): complete Phase 5 - Validation and Integration Testing`
- [ ] Checkpoint saved (if complex phase)
- [ ] Update this plan file with phase completion status

## Testing Strategy

### Unit Testing
- Archive structure creation (Phase 1)
- Script movement using git mv (Phase 2)
- Individual function extraction and consolidation (Phase 3)
- Documentation updates (Phase 4)

### Integration Testing
- Context metrics dashboard wrapper delegates correctly to lib/ (Phase 3)
- validate_context_reduction.sh sources updated lib/context-metrics.sh (Phase 5)
- All documentation links point to valid files (Phase 4, 5)

### End-to-End Testing
- Complete workflow: archive → consolidate → document → validate (Phase 5)
- No broken references in commands, agents, or lib (Phase 5)
- Active scripts function correctly after consolidation (Phase 5)

### Regression Testing
- Verify validate_context_reduction.sh behavior unchanged (Phase 5)
- Verify context_metrics_dashboard.sh output matches pre-consolidation (Phase 5)

## Documentation Requirements

### Files to Update
1. `.claude/scripts/README.md` - Remove archived scripts, add archive links
2. `.claude/lib/README.md` - Document new dashboard functions in context-metrics.sh
3. `.claude/archive/scripts/migration-2025-10/README.md` - Explain archive purpose
4. `.claude/archive/scripts/validation-2025-10/README.md` - Explain archive purpose

### Documentation Standards
- Follow CLAUDE.md documentation policy (clear, concise, no emojis)
- Include restoration instructions in archive READMEs
- Update file counts accurately in scripts/README.md
- Document function signatures and usage examples in lib/README.md

## Dependencies

### External Dependencies
- None (all operations use standard bash, git commands)

### Library Dependencies
- `lib/context-metrics.sh` (enhanced in Phase 3)
- `lib/template-integration.sh` (archived script dependency, no impact)

### File Dependencies
- `.claude/scripts/context_metrics_dashboard.sh` (modified in Phase 3)
- `.claude/scripts/migrate_to_topic_structure.sh` (archived in Phase 2)
- `.claude/scripts/validate_migration.sh` (archived in Phase 2)
- `.claude/scripts/validate-readme-counts.sh` (archived in Phase 2)
- `.claude/scripts/validate_context_reduction.sh` (retained, validated in Phase 5)

### Git Dependencies
- Use `git mv` for tracking file moves (preserves history)
- Atomic commits per phase for easy rollback

## Rollback Plan

### Phase-by-Phase Rollback
- **Phase 1**: Remove archive directories with `rm -rf .claude/archive/scripts/`
- **Phase 2**: Use `git mv` to restore archived scripts to scripts/ directory
- **Phase 3**: Revert context-metrics.sh changes, restore original context_metrics_dashboard.sh
- **Phase 4**: Revert documentation updates using `git checkout`
- **Phase 5**: No rollback needed (validation only)

### Emergency Rollback
If critical issues discovered:
```bash
# Revert all commits from this plan
git revert HEAD~5..HEAD

# Or reset to before implementation (loses commits)
git reset --hard <commit-before-plan-492>
```

## Risk Assessment

### Low Risk
- Archive creation (Phase 1) - non-destructive
- Documentation updates (Phase 4) - easily reverted
- Validation testing (Phase 5) - read-only operations

### Medium Risk
- Script archival (Phase 2) - uses git mv (safe, preserves history)
- Function consolidation (Phase 3) - code changes with comprehensive testing

### Mitigation Strategies
- Use git mv for all file moves (preserves history)
- Test wrapper thoroughly before committing (Phase 3)
- Run validation checks before each commit (all phases)
- Keep atomic commits for easy revert (all phases)

## Notes
- Complexity score: (17 tasks × 1.0) + (5 phases × 5.0) + (5.5 hours × 0.5) + (3 dependencies × 2.0) = 17 + 25 + 2.75 + 6 = **50.75**
- Since complexity score ≥50, consider using `/expand` for detailed phase breakdowns if needed during implementation
- All phases have clear testing requirements following CLAUDE.md Testing Protocols
- Phase dependencies enable parallel execution where possible (Phases 2 and 3 both depend only on Phase 1)
