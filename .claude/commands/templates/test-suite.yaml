name: "Test Suite Implementation"
description: "Template for implementing comprehensive test suites following TDD patterns with unit, integration, and coverage verification"
category: "testing"
complexity_level: "medium"
estimated_time: "5-7 hours"
variables:
  - name: module_name
    description: "Name of the module or component being tested"
    type: string
    required: true
  - name: test_type
    description: "Primary test type (unit, integration, e2e, performance)"
    type: string
    required: false
    default: "unit"
  - name: coverage_target
    description: "Target code coverage percentage"
    type: number
    required: false
    default: 80
  - name: test_framework
    description: "Testing framework to use (jest, pytest, mocha, etc.)"
    type: string
    required: false
  - name: has_async
    description: "Whether code being tested includes async operations"
    type: boolean
    required: false
    default: "false"
phases:
  - name: "Test Structure Setup"
    dependencies: []
    tasks:
      - "Create test directory structure for {{module_name}}"
      - "{{#if test_framework}}Set up {{test_framework}} configuration{{else}}Set up project test framework{{/if}}"
      - "Create test file naming convention documentation"
      - "Set up test fixtures and mock data"
      - "Configure code coverage tools (target: {{coverage_target}}%)"
      - "Set up test utilities and helpers"
      - "Create test data generators if needed"
      - "Configure CI integration for test execution"
  - name: "Unit Tests"
    dependencies: [1]
    tasks:
      - "Write tests for {{module_name}} core functionality"
      - "Test happy path scenarios for all public functions"
      - "Test edge cases and boundary conditions"
      - "Test error handling and validation logic"
      - "{{#if has_async}}Test async operations (promises, callbacks, async/await){{/if}}"
      - "Test state management and mutations"
      - "Mock external dependencies and API calls"
      - "Verify correct error messages and types"
      - "Run unit tests and verify all pass"
  - name: "Integration Tests"
    dependencies: [2]
    tasks:
      - "Test {{module_name}} integration with dependencies"
      - "Test data flow between components"
      - "Test database operations (if applicable)"
      - "Test API endpoints and responses (if applicable)"
      - "{{#if has_async}}Test concurrent operations and race conditions{{/if}}"
      - "Test configuration and environment variations"
      - "Test error propagation across components"
      - "Verify integration test coverage of critical paths"
      - "Run integration tests and verify all pass"
  - name: "Coverage Verification and Cleanup"
    dependencies: [2, 3]
    tasks:
      - "Run full test suite with coverage reporting"
      - "Identify untested code paths"
      - "Add tests to reach {{coverage_target}}% coverage target"
      - "Review and remove redundant tests"
      - "Optimize slow tests for better performance"
      - "Document test scenarios and rationale"
      - "Add test examples to module documentation"
      - "Set up pre-commit hooks to require passing tests"
      - "{{#if_eq test_type 'e2e'}}Test full user workflows end-to-end{{/if_eq}}"
      - "{{#if_eq test_type 'performance'}}Add performance benchmarks and thresholds{{/if_eq}}"
research_topics:
  - "{{#if test_framework}}Best practices for {{test_framework}} testing{{else}}Testing best practices for project language{{/if}}"
  - "{{#if has_async}}Testing strategies for asynchronous code{{/if}}"
  - "Code coverage metrics and meaningful targets"
  - "{{test_type}} testing patterns for {{module_name}}"
  - "Test maintainability and avoiding brittle tests"
