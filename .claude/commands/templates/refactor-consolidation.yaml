name: "Refactor and Consolidation"
description: "Template for code cleanup and consolidation with analysis, refactoring plan, incremental changes, and validation"
category: "refactoring"
complexity_level: "medium-high"
estimated_time: "6-10 hours"
variables:
  - name: target_module
    description: "Module, component, or code area to refactor"
    type: string
    required: true
  - name: consolidation_strategy
    description: "Refactoring approach (extract-common, merge-duplicates, simplify-logic, improve-structure)"
    type: string
    required: true
  - name: risk_level
    description: "Risk level of refactoring (low, medium, high)"
    type: string
    required: false
    default: "medium"
  - name: preserve_behavior
    description: "Whether refactor must preserve exact behavior"
    type: boolean
    required: false
    default: "true"
  - name: modernize_code
    description: "Whether to modernize code to current standards"
    type: boolean
    required: false
    default: "false"
phases:
  - name: "Analysis and Scope Definition"
    dependencies: []
    tasks:
      - "Analyze current state of {{target_module}}"
      - "Identify code smells and anti-patterns"
      - "Measure current code metrics (LOC, complexity, duplication)"
      - "Document dependencies and integration points"
      - "Review test coverage for {{target_module}}"
      - "Identify refactoring opportunities: {{consolidation_strategy}}"
      - "Assess risk level: {{risk_level}}"
      - "{{#if preserve_behavior}}Document exact current behavior to preserve{{/if}}"
      - "Define success criteria for refactoring"
  - name: "Refactoring Plan and Design"
    dependencies: [1]
    tasks:
      - "Create detailed refactoring plan"
      - "Design target architecture/structure"
      - "{{#if_eq consolidation_strategy 'extract-common'}}Identify common code to extract{{/if_eq}}"
      - "{{#if_eq consolidation_strategy 'merge-duplicates'}}Map duplicate code for consolidation{{/if_eq}}"
      - "{{#if_eq consolidation_strategy 'simplify-logic'}}Design simplified logic flow{{/if_eq}}"
      - "{{#if_eq consolidation_strategy 'improve-structure'}}Design improved module structure{{/if_eq}}"
      - "Break refactoring into small, safe incremental steps"
      - "Plan test strategy (tests before, during, and after)"
      - "{{#if modernize_code}}Document modernization changes (syntax, patterns, APIs){{/if}}"
      - "Identify rollback points for each step"
  - name: "Incremental Refactoring Implementation"
    dependencies: [2]
    tasks:
      - "{{#if preserve_behavior}}Ensure all tests passing before starting{{/if}}"
      - "Implement first refactoring increment"
      - "Run tests after each increment to verify behavior preserved"
      - "{{#if_eq consolidation_strategy 'extract-common'}}Extract common utilities/functions{{/if_eq}}"
      - "{{#if_eq consolidation_strategy 'merge-duplicates'}}Consolidate duplicate code incrementally{{/if_eq}}"
      - "{{#if_eq consolidation_strategy 'simplify-logic'}}Simplify complex conditional logic{{/if_eq}}"
      - "{{#if_eq consolidation_strategy 'improve-structure'}}Reorganize code structure step-by-step{{/if_eq}}"
      - "Update internal documentation and comments"
      - "{{#if modernize_code}}Apply modern language features and patterns{{/if}}"
      - "Commit each safe increment separately for easy rollback"
      - "Monitor code metrics (verify improvement)"
  - name: "Validation and Cleanup"
    dependencies: [3]
    tasks:
      - "Run full test suite to verify all functionality preserved"
      - "Compare code metrics before/after (LOC, complexity, duplication)"
      - "Verify performance hasn't regressed"
      - "{{#if preserve_behavior}}Validate exact behavior match with original{{/if}}"
      - "Clean up any temporary scaffolding or comments"
      - "Update module documentation with new structure"
      - "Update examples and usage instructions"
      - "Code review refactored code"
      - "{{#if_eq risk_level 'high'}}Perform additional integration testing{{/if_eq}}"
      - "Document refactoring decisions and rationale"
      - "Update CHANGELOG if public API affected"
spec_updater_checklist:
  - "Ensure plan is in topic-based directory structure (specs/{NNN_topic}/)"
  - "Create standard subdirectories if needed (reports/, debug/, scripts/, outputs/)"
  - "Update cross-references if artifacts moved during implementation"
  - "Create implementation summary in summaries/ when complete"
  - "Verify gitignore compliance (debug/ committed, others ignored)"
research_topics:
  - "Refactoring patterns for {{consolidation_strategy}}"
  - "Safe refactoring practices for {{risk_level}} risk code"
  - "{{#if modernize_code}}Modern best practices for target language/framework{{/if}}"
  - "{{#if preserve_behavior}}Behavior-preserving refactoring techniques{{/if}}"
  - "Code quality metrics and targets"
