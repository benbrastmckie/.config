name: "Migration Plan"
description: "Template for managing breaking changes with deprecation warnings, migration guides, backward compatibility, and cutover"
category: "migration"
complexity_level: "high"
estimated_time: "8-12 hours"
variables:
  - name: migration_type
    description: "Type of migration (api-change, database-schema, architecture-refactor, dependency-upgrade)"
    type: string
    required: true
  - name: affected_apis
    description: "List of APIs, interfaces, or components being changed"
    type: array
    required: true
  - name: deprecation_period
    description: "How long to maintain backward compatibility (in weeks or versions)"
    type: string
    required: false
    default: "4 weeks"
  - name: has_data_migration
    description: "Whether this migration includes data transformation"
    type: boolean
    required: false
    default: "false"
  - name: rollback_required
    description: "Whether rollback capability is required"
    type: boolean
    required: false
    default: "true"
phases:
  - name: "Deprecation Warnings and Communication"
    dependencies: []
    tasks:
      - "Document all breaking changes for {{migration_type}}"
      - "Create deprecation notices for affected APIs: {{#each affected_apis}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}"
      - "Add @deprecated annotations to code"
      - "Implement runtime warnings for deprecated functionality"
      - "Update CHANGELOG.md with deprecation timeline ({{deprecation_period}})"
      - "Create migration announcement for stakeholders"
      - "Set up deprecation tracking (log usage of deprecated features)"
      - "Document timeline and milestones for migration"
  - name: "Migration Guide Creation"
    dependencies: [1]
    tasks:
      - "Create comprehensive migration guide in docs/"
      - "Document all API changes with before/after examples"
      - "Provide code transformation examples"
      - "List step-by-step migration instructions"
      - "{{#if has_data_migration}}Document data migration procedures and scripts{{/if}}"
      - "Include troubleshooting section for common issues"
      - "Add FAQ for migration questions"
      - "Create migration checklist for users"
      - "Document any performance implications"
  - name: "Backward Compatibility Layer"
    dependencies: [1]
    tasks:
      - "Implement compatibility shims for deprecated APIs"
      - "Add adapter layer to bridge old and new interfaces"
      - "Ensure all existing tests still pass with compatibility layer"
      - "Add tests for compatibility layer functionality"
      - "{{#if has_data_migration}}Create data migration scripts with rollback{{/if}}"
      - "Document compatibility layer scope and limitations"
      - "Set up monitoring for deprecated feature usage"
      - "Create metrics to track migration progress"
      - "{{#if rollback_required}}Implement rollback procedures{{/if}}"
  - name: "Cutover and Deprecation Removal"
    dependencies: [2, 3]
    tasks:
      - "Verify deprecation period ({{deprecation_period}}) has elapsed"
      - "Analyze deprecation usage metrics (ensure minimal usage)"
      - "Update all internal code to use new APIs"
      - "Update all examples and documentation"
      - "Remove deprecated code and compatibility shims"
      - "Remove deprecation warnings"
      - "{{#if has_data_migration}}Execute final data migration (if applicable){{/if}}"
      - "Run full test suite to verify clean cutover"
      - "Update version number (major version bump for breaking changes)"
      - "Publish release notes with migration summary"
      - "{{#if rollback_required}}Test rollback procedures before release{{/if}}"
      - "Monitor post-cutover for issues"
research_topics:
  - "Best practices for {{migration_type}} migrations"
  - "Backward compatibility strategies for breaking changes"
  - "{{#if has_data_migration}}Data migration patterns and tools{{/if}}"
  - "Semantic versioning and breaking change communication"
  - "{{#if rollback_required}}Rollback strategies for production systems{{/if}}"
