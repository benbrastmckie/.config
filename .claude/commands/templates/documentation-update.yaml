name: "Documentation Update"
description: "Template for synchronizing documentation with code changes, including impact analysis and cross-reference verification"
category: "documentation"
complexity_level: "low"
estimated_time: "2-3 hours"
variables:
  - name: changed_files
    description: "List of files that have been modified"
    type: array
    required: true
  - name: doc_scope
    description: "Scope of documentation update (module, project, api)"
    type: string
    required: false
    default: "module"
  - name: breaking_changes
    description: "Whether changes include breaking API changes"
    type: boolean
    required: false
    default: "false"
  - name: change_summary
    description: "Brief summary of changes made to the code"
    type: string
    required: true
phases:
  - name: "Impact Analysis"
    dependencies: []
    tasks:
      - "Review code changes: {{change_summary}}"
      - "Identify affected documentation files for: {{#each changed_files}}{{this}}{{#unless @last}}, {{/unless}}{{/each}}"
      - "List public APIs/interfaces that changed"
      - "Check for modified function signatures or parameters"
      - "Identify new modules or components added"
      - "Identify deprecated or removed functionality"
      - "{{#if breaking_changes}}Document all breaking changes{{/if}}"
      - "Create documentation impact report"
  - name: "README and Guide Updates"
    dependencies: [1]
    tasks:
      - "Update README.md files in affected directories"
      - "Update module descriptions and purpose statements"
      - "Revise usage instructions based on code changes"
      - "Update installation/setup steps if dependencies changed"
      - "{{#if breaking_changes}}Add migration guide for breaking changes{{/if}}"
      - "Update feature list if new functionality added"
      - "Verify all code examples are still accurate"
      - "Update file structure documentation if files moved/added"
  - name: "Code Example Updates"
    dependencies: [2]
    tasks:
      - "Update inline code examples in documentation"
      - "Verify example code still runs correctly"
      - "Update API usage examples"
      - "Add examples for new features or functions"
      - "Remove examples for deprecated functionality"
      - "Update code snippets in tutorials or guides"
      - "Test all code examples to ensure they work"
      - "Update expected output in examples if changed"
  - name: "Cross-Reference Verification"
    dependencies: [2, 3]
    tasks:
      - "Verify all internal documentation links still work"
      - "Update links if file paths or anchors changed"
      - "Check that cross-references between docs are accurate"
      - "Update table of contents if structure changed"
      - "Verify external links still work (if applicable)"
      - "Update CLAUDE.md if standards or protocols changed"
      - "Update navigation links in directory READMEs"
      - "Validate markdown formatting and syntax"
      - "{{#if breaking_changes}}Update CHANGELOG.md with breaking changes{{/if}}"
research_topics:
  - "Documentation best practices for {{doc_scope}} scope"
  - "{{#if breaking_changes}}Effective communication strategies for breaking changes{{/if}}"
  - "Documentation testing and validation approaches"
  - "Keeping code examples synchronized with implementation"
